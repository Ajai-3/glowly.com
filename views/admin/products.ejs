<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('partials/head') %>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css">
</head>
<body>
  
<div class="header">
  <div class="responsive-logo-admin-side">
    <div class="d-flex align-items-center">
      <i class="fa fa-bars" id="sidebar-toggle"></i>
    <h2 class="m-0 mx-2"> Glowly</h2>
    </div>
  </div>
  <div class="d-flex align-items-center">
    <div class="search-bar">
      <form action="/admin/products" method="GET">
        <input type="text" name="search" placeholder="Search Products" value="<%= search %>">
        <button class="admin-search-button"><i class="fas fa-search"></i></button>
      </form>
    </div>
    <div class="admin-profile mx-3">
      <% if (admin && admin.profilePic) { %>
        <a href="/admin/settings" class="ms-2"><img src="<%= admin.profilePic %>" alt="Profile Picture" style="width: 35px; height: 35px; border-radius: 50%; object-fit: cover;"></a>
        <% } else {%>
          <a href="/admin/settings">
            <i class="fa-solid fa-circle-user"></i>
          </a>
        <% }  %>
    </div>
  </div>
</div>
<div id="background-overlay" class="overlay"></div>


<div class="main-content">

  <div class="brudcrumbs"><a href="/admin/products">Products</a></div>

  



    <div class="filter-container">
      <div class="filter-div1">
        <div class="filter-box">
          <i class="fa-solid fa-filter"></i>
        </div>
        <form action="/admin/products" method="GET">
          <div class="filter-box">
            <label for="status">Status
              <select name="status" id="status" onchange="this.form.submit()">
                <option value="all" <%= status === 'all' ? 'selected' : '' %>>All</option>
                <option value="deleted" <%= status === 'deleted' ? 'selected' : '' %>>Deleted</option>
                <option value="available" <%= status === 'available' ? 'selected' : '' %>>Available</option>
              </select>
            </label>
          </div>
        </form>
      </div>

      <div class="resposive-search-admin-side search-bar">
        <form action="/admin/products" method="GET">
          <input type="text" name="search" placeholder="Search Products" value="<%= search %>">
          <button class="admin-search-button"><i class="fas fa-search"></i></button>
        </form>
      </div>
      <div>
        <button type="button" class="top-items-btn add-product-btn" data-toggle="modal" data-target="#topItemsModal">
          <i class="fa-solid fa-crown"></i>&nbsp;&nbsp;Show Top Products
        </button>
        <a href="/admin/add-products">
          <button class="add-product-btn">
            <i class="fa-solid fa-plus"></i>&nbsp;&nbsp;Add New Products
          </button>
        </a>
      </div>
     
    </div>


  <div class="table-scroll-wrapper">
    <table class="all-table">
      <thead>
        <tr>
          <th>S.No</th>
          <th>Image</th>
          <th>Product Name</th>
          <th>Brand</th>
          <th>Category</th>
          <th>Sub category</th>
          <th>Offer</th>
          <th>Price</th>
          <th>Sale Price</th>
          <th>Stock</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% variants.forEach((variant, index) => { %>
          <tr class="<%= variant.varientIsDeleted ? 'deleted-row' : '' %>" data-product-id="<%= variant.productId %>" data-product-deleted="<%= variant.isDeleted ? 'true' : 'false' %>">
            <td><%= (currentPage - 1) * perPage + index + 1 %></td>
            <td>
              <% if (variant.images && variant.images.length > 0) { %>
                <img src="<%= variant.images[0] %>" alt="<%= variant.productTitle %> Image" width="60" height="60">
              <% } else { %>
                <img src="/path/to/placeholder/image.jpg" alt="Placeholder Image" width="50" height="50">
              <% } %>
            </td>
            <td class="truncate">
              <%= variant.productTitle %> - <%= variant.shade %>
            </td>
            <td><%= variant.brandName %></td>
            <td><%= variant.categoryName %></td>
            <td><%= variant.subcategoryName %></td>
            <td>
              <% if (variant.offerIsDeleted === false) { %>
                <p class="m-0">Offer:
                  (<%= variant.offerValue %>%) 
                </p>
                <p class="m-0" style="font-size: smaller; color: #049d01;"><%= variant.offerStartDate.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' }) %> </p>
                <p class="m-0" style="font-size: smaller; color: #9d0101;"><%= variant.offerEndDate.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' }) %></p>
                  <button class="remove-btn" onclick="removeOffer('<%= variant.productId %>', '<%= variant.offerId %>', this)">
                    Remove Offer
                  </button>
            <% } else { %>
              <button 
              class="add-offer-btn" 
              data-bs-toggle="modal" 
              data-bs-target="#offerModal"
              data-product-id="<%= variant.productId %>">
              Add Offer
            </button>
            <% } %>
           
            

            </td>
            <td><%= variant.regularPrice %></td>
            <td><%= variant.salePrice %></td>
            <td><%= variant.stockQuantity %></td>
            <td>
              <a href="/admin/add-variants/<%= variant.productId %>"><button class="edit-btn">Edit</button></a>
              <% if (!variant.isDeleted) { %>
                <button class="delete-btn" data-id="<%= variant.productId %>" data-deleted="false">Delete</button>
              <% } else { %>
                <button class="restore-btn" data-id="<%= variant.productId %>" data-deleted="true">Restore</button>
              <% } %>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
 

  <div class="pagination">
    <% 
      const pageLimit = 5;  
      let startPage = Math.max(1, currentPage - Math.floor(pageLimit / 2));
      let endPage = Math.min(totalPages, startPage + pageLimit - 1);
  
      if (endPage - startPage < pageLimit - 1) {
        startPage = Math.max(1, endPage - pageLimit + 1);
      }
    %>
  
    <% if (currentPage > 1) { %>
      <a href="/admin/products?page=<%= currentPage - 1 %>&search=<%= search %>&status=<%= status %>">Previous</a>
    <% } %>
  
    <% for (let i = startPage; i <= endPage; i++) { %>
      <a href="/admin/products?page=<%= i %>&search=<%= search %>&status=<%= status %>" class="<%= currentPage === i ? 'active' : '' %>"><%= i %></a>
    <% } %>
  
    <% if (currentPage < totalPages) { %>
      <a href="/admin/products?page=<%= currentPage + 1 %>&search=<%= search %>&status=<%= status %>">Next</a>
    <% } %>
  </div>
  

  <div class="modal fade" id="offerModal" tabindex="-1" aria-labelledby="offerModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="offerModalLabel">Add Offer</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="offerForm" novalidate>
            <div class="add-products-container-center coupoun-div">
              <input type="hidden" id="productId" name="productId">
              <div class="offer-input-group">
                <label for="name">Offer name</label>
                <input type="text" id="name" name="name" class="offer-input">
                <span class="offer-error" id="nameError"></span>
              </div>
            </div>
            <div class="add-products-container-center coupoun-div">
              <div class="offer-input-group">
                <label for="discount">Discount (%)</label>
                <input type="number" id="discount" name="discount" class="offer-input">
                <span class="offer-error" id="discountError"></span>
              </div>
              <div class="offer-input-group">
                <label for="endDate">End date</label>
                <input type="date" id="endDate" name="endDate" class="offer-input">
                <span class="offer-error" id="endDateError"></span>
              </div>
            </div>
            <button type="submit" class="offer-submit-btn">Save Offer</button>
          </form>
        </div>
      </div>
    </div>
  </div>


<div class="modal fade top-items-modal" id="topItemsModal" tabindex="-1" role="dialog" aria-labelledby="topItemsModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="topItemsModalLabel">Top 10 Items</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <ul id="top-items-list" class="list-group">
        </ul>
      </div>
    </div>
  </div>
</div>



<%- include('partials/footer') %>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
<script>
  const toastSuccess = (message) => {
    iziToast.success({
      message: message,
      backgroundColor: '#0e932d',
      messageColor: '#FFFFFF',
      icon: 'fa fa-check',
      iconColor: '#FFFFFF',
      timeout: 1500,
      position: 'topRight',
    });
  };

  const toastError = (message) => {
    iziToast.error({
      message: message,
      backgroundColor: '#e51e1e',
      messageColor: '#FFFFFF',
      icon: 'fa fa-times',
      iconColor: '#FFFFFF',
      timeout: 1500,
      position: 'topRight',
    });
  };

  const toastInfo = (message) => {
    iziToast.info({
      message: message,
      backgroundColor: '#2160de',
      messageColor: '#FFFFFF',
      icon: 'fa fa-info-circle',
      iconColor: '#FFFFFF',
      timeout: 1500,
      position: 'topRight',
    });
  };

  const toastWarning = (message) => {
    iziToast.warning({
      message: message,
      backgroundColor: '#e5811e',
      messageColor: '#212529',
      icon: 'fa fa-exclamation-triangle',
      iconColor: '#212529',
      timeout: 1500,
      position: 'topRight',
    });
  };
  document.addEventListener("DOMContentLoaded", function () {
    const offerModal = document.getElementById("offerModal");

    offerModal.addEventListener("show.bs.modal", function (event) {
      const button = event.relatedTarget;
      const productId = button.getAttribute("data-product-id");
      document.getElementById("productId").value = productId;
    });

    document.getElementById("offerForm").addEventListener("submit", function (event) {
      event.preventDefault();
      const productId = document.getElementById("productId").value;
      const discount = document.getElementById("discount").value;
      console.log("Submitting offer for Product ID:", productId, "with Discount:", discount);
    });
  });

  document.addEventListener('DOMContentLoaded', function () {
  const btn = document.querySelector(".top-items-btn");
  const itemList = document.getElementById("top-items-list");

  btn.onclick = async function () {
    try {
      const response = await fetch('/admin/top-products');
      const topItems = await response.json();

      itemList.innerHTML = '';

      topItems.forEach((item, index) => {
        const li = document.createElement('li');
        li.classList.add('top-items-item');

        const itemNumber = document.createElement('span');
        itemNumber.classList.add('top-items-number');
        itemNumber.textContent = index + 1;

        const itemName = document.createElement('span');
        itemName.classList.add('top-items-name');
        itemName.textContent = item.name;

        const soldCount = document.createElement('span');
        soldCount.classList.add('top-items-sold-count');
        soldCount.textContent = `Total Sold: ${item.totalSold}`;

        li.appendChild(itemNumber);
        li.appendChild(itemName);
        li.appendChild(soldCount);

        itemList.appendChild(li);
      });
    } catch (error) {
      console.error('Error fetching top items:', error);
    }
  };
});






document.addEventListener('DOMContentLoaded', function () {
    const buttons = document.querySelectorAll('.delete-btn, .restore-btn');

    buttons.forEach(button => {
        button.addEventListener('click', async () => {
            const productId = button.getAttribute('data-id');
            const isDeleted = button.getAttribute('data-deleted') === 'true';
            const productRow = document.querySelector(`[data-product-id="${productId}"]`);

            try {
                const response = await fetch(`/admin/toggle-product/${productId}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        const allButtons = document.querySelectorAll(`[data-id="${productId}"]`);
                        allButtons.forEach(btn => {
                            btn.textContent = result.isDeleted ? 'Restore' : 'Delete';
                            btn.className = result.isDeleted ? 'restore-btn' : 'delete-btn';
                            btn.setAttribute('data-deleted', result.isDeleted.toString());
                        });

                        toastSuccess(result.message);

                        const productRows = document.querySelectorAll(`[data-product-id="${productId}"]`);
                        productRows.forEach(row => {
                            const variantIsDeleted = row.getAttribute('data-variant-deleted') === 'true';
                            
                            if (variantIsDeleted) {
                                row.classList.add('deleted-row');
                            } else if (result.isDeleted) {
                                row.classList.add('deleted-row');
                            } else {
                                row.classList.remove('deleted-row');
                            }
                        });
                    } else {
                        toastError('Failed to update product status');
                    }
                } else {
                    toastError('Error toggling product status');
                }
            } catch (error) {
                console.error('Error:', error);
                toastWarning('An error occurred');
            }
        });
    });

});
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('offerForm');
  const nameInput = document.getElementById('name');
  const discountInput = document.getElementById('discount');
  const endDateInput = document.getElementById('endDate');
  const productIdInput = document.getElementById('productId');
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  endDateInput.min = tomorrow.toISOString().split('T')[0];
  function showError(input, message) {
    const errorElement = document.getElementById(input.id + 'Error');
    input.classList.add('error');
    errorElement.textContent = message;
    errorElement.style.display = 'block';
    return false;
  }
  function clearError(input) {
    const errorElement = document.getElementById(input.id + 'Error');
    input.classList.remove('error');
    errorElement.style.display = 'none';
    return true;
  }
  function validateInput(input) {
    const value = input.value.trim();
    switch (input.id) {
      case 'name':
        return value.length >= 3 ? clearError(input) : showError(input, 'Offer name must be at least 3 characters');
      case 'discount':
        const discount = parseFloat(value);
        if (!value) return showError(input, 'Discount is required');
        if (isNaN(discount)) return showError(input, 'Please enter a valid number');
        if (discount <= 0) return showError(input, 'Discount must be greater than 0');
        if (discount > 90) return showError(input, 'Discount cannot exceed 90%');
        return clearError(input);
      case 'endDate':
        if (!value) return showError(input, 'End date is required');
        const selectedDate = new Date(value);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        if (selectedDate <= today) return showError(input, 'End date must be after today');
        return clearError(input);
    }
  }
  document.querySelectorAll('.add-offer-btn').forEach(button => {
    button.addEventListener('click', function() {
      productIdInput.value = this.getAttribute('data-product-id');
    });
  });
  [nameInput, discountInput, endDateInput].forEach(input => {
    input.addEventListener('input', () => validateInput(input));
    input.addEventListener('blur', () => validateInput(input));
  });
  form.addEventListener('submit', function(event) {
    event.preventDefault();
    const isNameValid = validateInput(nameInput);
    const isDiscountValid = validateInput(discountInput);
    const isEndDateValid = validateInput(endDateInput);
    if (isNameValid && isDiscountValid && isEndDateValid) {
      const formData = {
        productId: productIdInput.value,
        name: nameInput.value.trim(),
        discount: parseFloat(discountInput.value),
        endDate: endDateInput.value,
      };
      fetch('/admin/product-offer', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          toastSuccess('Offer added successfully!');
          const modal = bootstrap.Modal.getInstance(document.getElementById('offerModal'));
          modal.hide();
          form.reset();
          [nameInput, discountInput, endDateInput].forEach(input => clearError(input));

          setTimeout(() => {
            window.location.reload()
          }, 1500)
        } else {
          toastError('Failed to add offer');
        }
      })
      .catch((error) => {
        console.error('Error:', error);
        toastError('An error occurred. Please try againnn.')
      });

    }
  });
});
let isProcessing = false;

async function removeOffer(productId, offerId, button) {
  if (isProcessing) return;
  isProcessing = true;
  button.disabled = true;

  if (!offerId) {
    toastError('Offer ID is required.');
    isProcessing = false;
    return;
  }

  const response = await fetch(`/admin/remove-product-offer/${productId}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ offerId: offerId })
  });

  const result = await response.json();

  if (result.success) {
    toastSuccess('Offer removed successfully!');
    setTimeout(() => {
      location.reload();
    }, 1500);
  } else {
    toastError('Failed to remove offer: ' + result.message);
  }

  button.disabled = false;
  isProcessing = false;
}


</script>
<style>
.error-message {
  color: #d10317;
  font-size: 12px;
  margin-top: 5px;
  min-height: 17px;
}

.form-control.is-invalid {
  border-color: #af0214;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right calc(0.375em + 0.1875rem) center;
  background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.form-control.is-valid {
  border-color: #049d01;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right calc(0.375em + 0.1875rem) center;
  background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.offer-input-group {
  margin-bottom: 1rem;
}

.offer-input-group label {
  display: block;
  margin-bottom: 0.5rem;
  color: #e7e7e7;
  font-weight: 500;
}

.offer-input {
  width: 100%;
  padding: 0.5rem;
  border: 2px solid #ddd;
  border-radius: 4px;
  transition: all 0.3s ease;
}

.offer-input:focus {
  border-color: #E80071;
  outline: none;
  box-shadow: 0 0 0 2px rgba(232, 0, 113, 0.1);
}

.offer-input.error {
  border-color: #bf0010;
}

.offer-error {
  display: none;
  color: #cd0213;
  font-size: 0.8rem;
  margin-top: 0.25rem;
}

.offer-submit-btn {
  width: 100%;
  padding: 0.75rem;
  background: #E80071;
  color: white;
  border: none;
  border-radius: 4px;
  font-weight: 500;
  transition: all 0.3s ease;
}

.offer-submit-btn:hover {
  background: #d1006a;
  transform: translateY(-1px);
}

.offer-submit-btn:disabled {
  background: #ccc;
  cursor: not-allowed;
  transform: none;
}
</style>
</html>