<!DOCTYPE html>
<html lang="en">
<%- include('partials/head') %>
<body>
    <div class="main-content">
        <div class="header">
            <div class="search-bar">
                <form action="/search" method="GET">
                    <input type="text" name="search" placeholder="Search">
                </form>
            </div>
            <div class="admin-profile mx-3">
                <a href="/admin/settings">
                    <i class="fa-solid fa-circle-user"></i>
                </a>
            </div>
        </div>
        <div class="breadcrumbs">breadcrumbs</div>

        <div class="dashboard-summary-container">
            <div class="row">
                <!-- Top Row: Dashboard Summary Boxes -->
                <div class="col-12 pe-3 dashboard-summary">
                    <div class="dashboard-summary1">
                        <h3>Total Users</h3>
                        <p><%= userCount %></p>
                        <p1>
                            <i class="fa-solid fa-chart-simple"></i> 8.5%
                            <p2>Up from last month</p2>
                        </p1>
                    </div>
                    <div class="dashboard-summary2">
                        <h3>Total Orders</h3>
                        <p id="total-orders">0</p>
                        <p1>
                            <i class="fa-solid fa-chart-simple"></i> 1.5%
                            <p2>Up from last month</p2>
                        </p1>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Gross Revenue</h3>
                        <p id="gross-revenue">₹ 0</p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> 4.5% Down from last month
                        </p2>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Returns/Refunds</h3>
                        <p id="returns-refunds">₹ 0</p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> 4.5% Down from last month
                        </p2>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Net Revenue</h3>
                        <p id="net-revenue">₹ 0</p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> 4.5% Down from last month
                        </p2>
                    </div>
                </div>
            </div>
        
            <div class="row">
                <!-- Main Content Row -->
                <div class="col-9">
                    <!-- Chart Section -->
                    <div class="chart-wrapper">
                        <div class="chart-container">
                            <div class="filter-container">
                                <div class="dawonload">
                                    <button id="download-pdf" class="download-pdf me-2">DownloadPDF</button>
                                    <button id="download-excel" class="download-excel">DownloadExcel</button>
                                </div>
                                <select id="filter" class="filter-select">
                                    <option value="all_time">All Time</option>
                                    <option value="today">Today</option>
                                    <option value="this_week">This Week</option>
                                    <option value="this_month">This Month</option>
                                    <option value="this_year">This Year</option>
                                    <option value="custom">Custom</option>
                                </select>
                                <div id="custom-date-range" style="display: none;">
                                    <input type="date" id="start-date" class="date-input">
                                    <input type="date" id="end-date" class="date-input">
                                    <button id="apply-custom-filter" class="apply-btn">Apply</button>
                                </div>
                                <button id="toggleChart" class="toggle-btn"><i class="fas fa-chart-bar"></i></button>
                            </div>
                            <canvas id="salesChart"></canvas>
                        </div>
                    </div>
                </div>
        
                <!-- Vertical Box Section -->
                <div class="col-3">
                    <div class="vertical-box">
                        xcvxcvxcv
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Filter Section -->
        

        <!-- Table Section -->
        <div class="table-container" style="margin-top: 20px;">
            <h2>Sales Data</h2>
            
            <table class="all-table">
                <thead>
                    <tr>
                        <th>No</th>
                        <th>Order ID</th>
                        <th>Customer</th>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Amount</th>
                        <th>Status</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody id="salesDataTableBody">
                </tbody>
            </table>
            <div class="pagination mb-4">
                <div id="pageInfo" class="page-info"></div>
                <div id="paginationControls" class="pagination-controls"></div>
            </div>
        </div>

    </div>

    <%- include('partials/footer') %>

<style>
.pagination {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-top: 20px;
    font-size: var(--font-size-third);
    gap: 10px;
}

.page-info {
    color: var(--text-color-3);
    margin-bottom: 10px;
}

.pagination-controls {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 5px;
}

.pagination-controls button {
    padding: 1px 6px;
    margin: 0 5px;
    border: 1px solid var(--bg-color-btn-hover2);
    color: var(--text-color-3);
    cursor: pointer;
    background: transparent;
    transition: all 0.3s ease;
    font-size: inherit;
}

.pagination-controls button:hover {
    color: var(--text-color);
    border: 1px solid var(--text-color);
    background-color: var(--text-color-2);
}

.pagination-controls button.active {
    color: var(--text-color-4);
    border: 1px solid var(--text-color-4);
    background-color: var(--bg-color-btn-hover-4);
}

.pagination-controls button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}


</style>
<!-- Load jsPDF first -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<!-- Then load the AutoTable plugin -->
<script src="https://cdn.jsdelivr.net/npm/jspdf-autotable@3.5.22/dist/jspdf.plugin.autotable.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const salesData = <%- JSON.stringify(salesData) %>;

    console.log(salesData)



    const ctx = document.getElementById('salesChart').getContext('2d');
    const chartContainer = document.querySelector('.chart-container');

    let currentChartType = 'bar';
    let chart = null;

    // Initialize filter elements
    const filterSelect = document.getElementById('filter');
    const customDateRange = document.getElementById('custom-date-range');
    const startDateInput = document.getElementById('start-date');
    const endDateInput = document.getElementById('end-date');
    const applyCustomFilterButton = document.getElementById('apply-custom-filter');

    // Pagination variables
    let currentPage = 1;
    const rowsPerPage = 10;

    let currentFilteredData = []; 

    function processDataForDisplay() {
        let filteredProducts = [];
        salesData.forEach(order => {
            if (order.products && Array.isArray(order.products)) {
                order.products.forEach(product => {
                    filteredProducts.push({
                        orderId: order._id,
                        userName: order.user_name,
                        productName: product.product_name,
                        productBrandName: product.brand_name,
                        productCategoryName: product.category_name,
                        productSubCategoryName: product.sub_category,
                        productCouponCode: product.coupon_name,
                        quantity: product.quantity,
                        amount: product.total_amount,
                        status: product.status,
                        date: new Date(order.createdAt)
                        


                    });
                });
            }
        });
        return filteredProducts;
    }

    function filterByDateRange(data, startDate, endDate) {
        if (!startDate || !endDate) return data;
        return data.filter(item => {
            const itemDate = item.date;
            return itemDate >= startDate && itemDate <= endDate;
        });
    }

    function updateSummaryCards(data) {
        const filter = filterSelect.value;
        let filteredData = [...data];
        const now = new Date();

        // Filter data based on selected period
        if (filter === 'today') {
            filteredData = data.filter(item => {
                const itemDate = new Date(item.date);
                return itemDate.toDateString() === now.toDateString();
            });
        } else if (filter === 'this_week') {
            const weekStart = new Date();
            weekStart.setDate(weekStart.getDate() - 6); 
            const weekEnd = new Date(); 
            filteredData = data.filter(item => {
                const itemDate = new Date(item.date);
                return itemDate >= weekStart && itemDate <= weekEnd;
            });
        } else if (filter === 'this_month') {
            const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);
            filteredData = data.filter(item => {
                const itemDate = new Date(item.date);
                return itemDate >= monthStart;
            });
        } else if (filter === 'this_year') {
            const yearStart = new Date(now.getFullYear(), 0, 1);
            filteredData = data.filter(item => {
                const itemDate = new Date(item.date);
                return itemDate >= yearStart;
            });
        }

        // Calculate metrics
        let totalOrders = 0;
        let grossRevenue = 0;
        let returnsRefunds = 0;


        filteredData.forEach(item => {
            totalOrders++;
            grossRevenue += item.amount;
            if (item.status === 'returned') {
                returnsRefunds += item.amount;
            }
        });

        const netRevenue = grossRevenue - returnsRefunds;

        document.getElementById('total-orders').textContent = totalOrders;
        document.getElementById('gross-revenue').textContent = `₹ ${grossRevenue.toLocaleString()}`;
        document.getElementById('returns-refunds').textContent = `₹ ${returnsRefunds.toLocaleString()}`;
        document.getElementById('net-revenue').textContent = `₹ ${netRevenue.toLocaleString()}`;

    }


    function updateChart(data) {
        const groupedData = {};
        const filter = filterSelect.value;

        // Update summary cards with filtered data
        updateSummaryCards(data);

        data.forEach(item => {
            let key;
            const date = new Date(item.date);
            
            if (filter === 'today') {
                key = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            } else if (filter === 'all_time') {
                key = date.getFullYear().toString(); 
            } else if (filter === 'this_year') {
                key = date.toLocaleDateString([], { month: 'long' });
            } else {
                key = date.toLocaleDateString();
            }

            if (!groupedData[key]) {
                groupedData[key] = {
                    total: 0,
                    delivered: 0,
                    returned: 0,
                    orderCount: 0,
                    deliveredCount: 0,
                    returnedCount: 0
                };
            }
            groupedData[key].total += item.amount;
            groupedData[key].orderCount += 1;
            
            if (item.status === 'delivered') {
                groupedData[key].delivered += item.amount;
                groupedData[key].deliveredCount += 1;
            }
            if (item.status === 'returned') {
                groupedData[key].returned += item.amount;
                groupedData[key].returnedCount += 1;
            }
        });

        // Sort keys based on date
        const dates = Object.keys(groupedData);
        if (filter === 'today') {
            dates.sort((a, b) => {
                const timeA = new Date(`1970/01/01 ${a}`);
                const timeB = new Date(`1970/01/01 ${b}`);
                return timeA - timeB;
            });
        } else if (filter === 'all_time') {
            dates.sort((a, b) => a - b); 
        } else {
            dates.sort((a, b) => new Date(a) - new Date(b));
        }

        const datasets = [
            {
                label: 'Total Sales',
                data: dates.map(date => groupedData[date].total),
                backgroundColor: getComputedStyle(chartContainer).getPropertyValue('--bar-color'),
                borderColor: getComputedStyle(chartContainer).getPropertyValue('--bar-border-color'),
                borderWidth: 1,
                orderCounts: dates.map(date => groupedData[date].orderCount)
            },
            {
                label: 'Delivered',
                data: dates.map(date => groupedData[date].delivered),
                backgroundColor: getComputedStyle(chartContainer).getPropertyValue('--delivered-bar-color'),
                borderColor: getComputedStyle(chartContainer).getPropertyValue('--delivered-bar-border'),
                borderWidth: 1,
                orderCounts: dates.map(date => groupedData[date].deliveredCount)
            },
            {
                label: 'Returned',
                data: dates.map(date => groupedData[date].returned),
                backgroundColor: getComputedStyle(chartContainer).getPropertyValue('--returned-bar-color'),
                borderColor: getComputedStyle(chartContainer).getPropertyValue('--returned-bar-border'),
                borderWidth: 1,
                orderCounts: dates.map(date => groupedData[date].returnedCount)
            }
        ];

        if (chart) {
            chart.destroy();
        }

        chart = new Chart(ctx, {
            type: currentChartType,
            data: {
                labels: dates,
                datasets: datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: value => '₹ ' + value.toLocaleString(),
                            color: 'rgba(255, 255, 255, 0.8)'  
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'  
                        }
                    },
                    x: {
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.8)'  
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'  
                        }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: 'rgba(255, 255, 255, 0.8)'  
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: context => {
                                const count = context.dataset.orderCounts[context.dataIndex];
                                return [
                                    `${context.dataset.label}: ₹ ${context.parsed.y.toLocaleString()}`,
                                    `Orders: ${count}`
                                ];
                            }
                        }
                    }
                }
            }
        });
    }


    

    


    function updateTable(data) {
        const tbody = document.getElementById('salesDataTableBody');
        tbody.innerHTML = '';

        const start = (currentPage - 1) * rowsPerPage;
        const end = Math.min(start + rowsPerPage, data.length);
        const pageData = data.slice(start, end);
        console.log("page",pageData)

        pageData.forEach((item, index) => {
            const row = document.createElement('tr');
            const dateTimeFormat = filterSelect.value === 'today' 
                ? item.date.toLocaleTimeString() 
                : item.date.toLocaleString();    

            row.innerHTML = `
                <td>${start + index + 1}</td>
                <td>${item.orderId}</td>
                <td>${item.userName}</td>
                <td>${item.productName}</td>
                <td>${item.quantity}</td>
                <td>₹ ${item.amount.toLocaleString()}</td>
                <td><span class="status ${item.status}">${item.status}</span></td>
                <td>${dateTimeFormat}</td>
            `;
            tbody.appendChild(row);
        });
    }

    function updatePaginationControls(totalItems) {
        const totalPages = Math.ceil(totalItems / rowsPerPage);
        const controls = document.getElementById('paginationControls');
        controls.innerHTML = '';

        if (totalPages > 3) {
            addPageButton('First', 1);
        }

        for (let i = 1; i <= totalPages; i++) {
            if (totalPages <= 3 || 
                i === 1 || 
                i === totalPages || 
                (i >= currentPage - 1 && i <= currentPage + 1)) {
                addPageButton(i, i);
            }
        }

        if (totalPages > 3) {
            addPageButton('Last', totalPages);
        }

        document.getElementById('pageInfo').textContent = 
            `Page ${currentPage} of ${totalPages}`;
    }

    function addPageButton(text, page) {
        const button = document.createElement('button');
        button.textContent = text;
        if (page === currentPage) button.classList.add('active');
        button.addEventListener('click', () => {
            currentPage = page;
            refreshDisplay();
        });
        document.getElementById('paginationControls').appendChild(button);
    }

    function getDateRange(filter) {
        const today = new Date();
        let startDate, endDate;

        switch (filter) {
            case 'all_time':
                // For all time, we'll get data from 5 years ago to ensure we have enough history
                startDate = new Date(today.getFullYear() - 5, 0, 1);
                startDate.setHours(0, 0, 0, 0);
                endDate = new Date();
                endDate.setHours(23, 59, 59, 999);
                break;
            case 'today':
                startDate = new Date(today.setHours(0, 0, 0, 0));
                endDate = new Date();
                endDate.setHours(23, 59, 59, 999);
                break;
            case 'this_week':
                // Get today and set end time to 23:59:59
                endDate = new Date();
                endDate.setHours(23, 59, 59, 999);
                
                // Get 7 days back from today and set start time to 00:00:00
                startDate = new Date();
                startDate.setDate(endDate.getDate() - 6); 
                startDate.setHours(0, 0, 0, 0);
                break;
            case 'this_month':
                startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                endDate.setHours(23, 59, 59, 999);
                break;
            case 'this_year':
                startDate = new Date(today.getFullYear(), 0, 1);
                endDate = new Date(today.getFullYear(), 11, 31);
                endDate.setHours(23, 59, 59, 999);
                break;
            case 'custom':
                if (!startDateInput.value || !endDateInput.value) return null;
                startDate = new Date(startDateInput.value);
                startDate.setHours(0, 0, 0, 0);
                endDate = new Date(endDateInput.value);
                endDate.setHours(23, 59, 59, 999);
                break;
            default:
                return null;
        }

        console.log(`Filter: ${filter}`);
        console.log(`Start Date: ${startDate.toLocaleString()}`);
        console.log(`End Date: ${endDate.toLocaleString()}`);
        
        return { startDate, endDate };
    }








    document.getElementById('download-excel').addEventListener('click', function() {
    console.log('Generating Excel with current filtered data.');
    console.log('Current Filtered Data:', currentFilteredData); // Debugging line

    if (!currentFilteredData || currentFilteredData.length === 0) {
        console.error('No orders available for the selected filter.');
        alert('No orders available for the selected filter.');
        return;
    }

    // Calculate overall statistics
    const totalOrders = currentFilteredData.length;
    const totalAmount = currentFilteredData.reduce((sum, order) => sum + order.amount, 0);
    const discountAmount = currentFilteredData.reduce((sum, order) => sum + (order.discount || 0), 0);
    const netRevenue = totalAmount - discountAmount;

    // Calculate product status counts
    const statusCounts = currentFilteredData.reduce((counts, order) => {
        counts[order.status] = (counts[order.status] || 0) + 1;
        return counts;
    }, {});

    // Prepare the report data for Excel (Order Details)
    const reportData = currentFilteredData.map(order => ({
        'Order ID': order.orderId,
        'User': order.userName,
        'Product': order.productName,
        'Status': order.status,
        'Date': new Date(order.date).toLocaleString(), // Formatting the date
        'Amount': '₹ ' + order.amount.toFixed(2),
        'Amount After Discount': '₹ ' + (order.amount - (order.discount || 0)).toFixed(2)
    }));

    // Prepare overall stats for Excel
    const overallStats = [
        ['Total Orders', totalOrders],
        ['Total Sales Amount', '₹ ' + totalAmount.toFixed(2)],
        ['Net Revenue', '₹ ' + netRevenue.toFixed(2)],
        ['Pending Orders', statusCounts.pending || 0],
        ['Delivered Orders', statusCounts.delivered || 0],
        ['Returned Orders', statusCounts.returned || 0]
    ];

    // Create the worksheet for the order data table
    const wsOrders = XLSX.utils.json_to_sheet(reportData);

    // Create the workbook
    const wb = XLSX.utils.book_new();

    // Append the overall stats as a new sheet
    const statsSheet = XLSX.utils.aoa_to_sheet(overallStats);
    XLSX.utils.book_append_sheet(wb, statsSheet, 'Overall Stats');

    // Append the orders data as a new sheet (this is the orders table)
    XLSX.utils.book_append_sheet(wb, wsOrders, 'Sales Report');

    // Write the Excel file
    XLSX.writeFile(wb, 'sales_report.xlsx');
});


// PDF Download Event Listener
document.getElementById('download-pdf').addEventListener('click', function() {
    console.log('Generating PDF with current filtered data.');
    console.log('Current Filtered Data:', currentFilteredData); 

    if (currentFilteredData.length === 0) {
        console.error('No orders available for the selected filter.');
        return;
    }

    // Calculating overall statistics
    const totalOrders = currentFilteredData.length;
    const totalAmount = currentFilteredData.reduce((sum, order) => sum + order.amount, 0);
    const discountAmount = currentFilteredData.reduce((sum, order) => sum + (order.discount || 0), 0);
    const netRevenue = totalAmount - discountAmount; 

    // Calculating product status counts
    const statusCounts = {
        pending: 0,
        delivered: 0,
        returned: 0
    };

    currentFilteredData.forEach(order => {
        if (order.status === 'pending') statusCounts.pending++;
        if (order.status === 'delivered') statusCounts.delivered++;
        if (order.status === 'returned') statusCounts.returned++;
    });

    // Initialize jsPDF
    const { jsPDF } = window.jspdf; 
    const doc = new jsPDF();

    // Check if autoTable is loaded
    if (!doc.autoTable) {
        console.error("autoTable method is not available. Please check if the jsPDF AutoTable plugin is loaded correctly.");
        return;
    }

    // Report Title and Overall Stats
    doc.setFontSize(16);
    doc.text('Sales Report', 10, 10);
    
    doc.setFontSize(12);
    doc.text('Overall Sales Count: ' + totalOrders, 10, 20);
    doc.text('Total Sales Amount: ₹ ' + totalAmount.toFixed(2), 10, 30);
    doc.text('Net Revenue: ₹ ' + netRevenue.toFixed(2), 10, 40);
    
    // Product Status Counts
    doc.text('Product Status Summary:', 10, 50);
    doc.text('Pending Orders: ' + statusCounts.pending, 10, 60);
    doc.text('Delivered Orders: ' + statusCounts.delivered, 10, 70);
    doc.text('Returned Orders: ' + statusCounts.returned, 10, 80);

    // Create the table with order details using the autoTable method
    doc.text('Order Details:', 10, 90);
    doc.autoTable({
        head: [['Sl No', 'User Name', 'Product Name', 'Quantity', 'Total Amount', 'Total After Discount', 'Status', 'Order Date']],
        body: currentFilteredData.map((order, index) => [
            index + 1,
            order.userName,
            order.productName,
            order.quantity,
            '₹ ' + order.amount.toFixed(2),
            '₹ ' + (order.amount - (order.discount || 0)).toFixed(2),
            order.status,
            new Date(order.date).toLocaleString(),
        ]),
        startY: 100,
        theme: 'grid',
        margin: { top: 10 },
        styles: {
            overflow: 'linebreak',
            fontSize: 10,
            cellPadding: 3,
        },
        columnStyles: {
            0: { halign: 'center' },
            1: { halign: 'center' },
            2: { halign: 'left' },
            3: { halign: 'center' },
            4: { halign: 'center' },
            5: { halign: 'center' },
            6: { halign: 'center' },
            7: { halign: 'center' },
            8: { halign: 'center' },
        },
    });

    // Save the generated PDF
    doc.save('sales_report.pdf');
});





    function refreshDisplay() {
        const dateRange = getDateRange(filterSelect.value);
        let displayData = processDataForDisplay();
        
        if (dateRange) {
            displayData = filterByDateRange(displayData, dateRange.startDate, dateRange.endDate);
        }

        currentFilteredData = displayData; 

        updateTable(displayData);
        updateChart(displayData);
        updatePaginationControls(displayData.length);
    }

    // Event Listeners
    filterSelect.addEventListener('change', function() {
        if (this.value === 'custom') {
            customDateRange.style.display = 'flex';
        } else {
            customDateRange.style.display = 'none';
            currentPage = 1;
            refreshDisplay();
        }
    });

    applyCustomFilterButton.addEventListener('click', () => {
        currentPage = 1;
        refreshDisplay();
    });

    document.getElementById('toggleChart').addEventListener('click', () => {
        currentChartType = currentChartType === 'bar' ? 'line' : 'bar';
        refreshDisplay();
    });

    function getCurrentFilter() {
        return filterSelect.value;
    }

    // Initialize display
    refreshDisplay();
});
</script>
</body>
</html>