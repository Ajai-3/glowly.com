<html lang="en">
<%- include('partials/head') %>

<body>
    <%
    let totalOrders = 0;
    let totalRevenue = 0;
    let totalDiscount = 0;

    salesData.forEach(order => {
        totalOrders += 1; // Count each delivered product as an order
        totalRevenue += order.total_amount || 0;
        totalDiscount += order.discount_amount || 0;
    });

    // Reverse the chartData array to make the latest data appear on the right side
    const reversedChartData = chartData.reverse();
    %>

    <div class="main-content">
        <div class="header">
            <div class="search-bar">
                <form action="/search" method="GET">
                    <input type="text" name="search" placeholder="Search">
                </form>
            </div>
            <div class="admin-profile mx-3">
                <a href="/admin/settings">
                    <i class="fa-solid fa-circle-user"></i>
                </a>
            </div>
        </div>
        <div class="breadcrumbs">breadcrumbs</div>

        <div class="dashboard-summary-container">
            <div class="row">
                <div class="col-12 pe-3 dashboard-summary">
                    <div class="dashboard-summary1">
                        <h3>Total Users</h3>
                        <p><%= userCount %></p>
                        <p1>
                            <i class="fa-solid fa-chart-simple"></i>
                            <p2>Active Users</p2>
                        </p1>
                    </div>
                    <div class="dashboard-summary2">
                        <h3>Total Orders</h3>
                        <p id="total-orders"><%= totalOrders %></p>
                        <p1>
                            <i class="fa-solid fa-chart-simple"></i>
                            <p2>Delivered Orders</p2>
                        </p1>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Total Revenue</h3>
                        <p id="gross-revenue">₹ <%= totalRevenue.toFixed(2) %></p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> From Delivered Orders
                        </p2>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Total Discount</h3>
                        <p id="total-discount">₹ <%= totalDiscount.toFixed(2) %></p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> Applied Discounts
                        </p2>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Net Revenue</h3>
                        <p id="net-revenue">₹ <%= (totalRevenue - totalDiscount).toFixed(2) %></p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> After Discounts
                        </p2>
                    </div>
                </div>
            </div>
        
            <div class="row">
                <div class="col-8">
                    <div class="chart-wrapper">
                        <div class="chart-container">
                            <div class="filter-container">
                                <div class="download">
                                    <button id="download-pdf" class="download-pdf me-2">Download PDF</button>
                                    <button id="download-excel" class="download-excel">Download Excel</button>
                                </div>
                                <select id="filter" class="filter-select" onchange="applyFilter(this.value)">
                                    <option value="all_time" <%= filter === 'all_time' ? 'selected' : '' %>>All Time</option>
                                    <option value="today" <%= filter === 'today' ? 'selected' : '' %>>Today</option>
                                    <option value="this_week" <%= filter === 'this_week' ? 'selected' : '' %>>This Week</option>
                                    <option value="this_month" <%= filter === 'this_month' ? 'selected' : '' %>>This Month</option>
                                    <option value="this_year" <%= filter === 'this_year' ? 'selected' : '' %>>This Year</option>
                                    <option value="custom" <%= filter === 'custom' ? 'selected' : '' %>>Custom</option>
                                </select>
                                <div id="custom-date-range" style="display: <%= filter === 'custom' ? 'inline-block' : 'none' %>;">
                                    <input type="date" id="start-date" class="date-input" value="<%= startDate %>">
                                    <input type="date" id="end-date" class="date-input" value="<%= endDate %>">
                                    <button id="apply-custom-filter" onclick="applyCustomFilter()" class="apply-btn">Apply</button>
                                </div>
                                <button id="toggleChart" class="toggle-btn"><i class="fas fa-chart-bar"></i></button>
                            </div>
                            <canvas id="salesChart"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="chart-wrapper">
                        <div class="chart-container">
                            <h6>Payment Methods Distribution</h6>
                            <canvas id="paymentMethodsChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        
            <div class="table-container">
                <h2>Sales Data (Delivered Orders)</h2>
                <table class="all-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Amount</th>
                            <th>Discount</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody id="sales-table-body">
                        <% salesData.forEach(order => { %>
                            <tr>
                                <td><%= order._id %></td>
                                <td><%= order.user_name %></td>
                                <td><%= order.product.title %></td>
                                <td><%= order.quantity || 0 %></td>
                                <td>₹ <%= (order.total_amount || 0) %></td>
                                <td>₹ <%= (order.discount_amount || 0) %></td>
                                <td><%= new Date(order.createdAt).toLocaleString() %></td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
                <div class="d-flex justify-content-center    align-items-center">
                    <nav aria-label="Page navigation" class="d-flex justify-content-between align-items-center mb-4">
                    
                        <ul class="pagination mb-0">
                            <% if (typeof hasPrevPage !== 'undefined' && hasPrevPage) { %>
                                <li class="page-item">
                                    <a class="page-link" href="?page=<%= page - 1 %>&filter=<%= filter %>&startDate=<%= startDate %>&endDate=<%= endDate %>" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                            <% } %>
                            
                            <% 
                            const currentPage = typeof page !== 'undefined' ? page : 1;
                            const totalPagesCount = typeof totalPages !== 'undefined' ? totalPages : 1;
                            let startPage = Math.max(1, currentPage - 2);
                            let endPage = Math.min(totalPagesCount, startPage + 4);
                            if (endPage - startPage < 4) {
                                startPage = Math.max(1, endPage - 4);
                            }
                            %>
                            
                            <% for(let i = startPage; i <= endPage; i++) { %>
                                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                    <a class="page-link" href="?page=<%= i %>&filter=<%= filter %>&startDate=<%= startDate %>&endDate=<%= endDate %>"><%= i %></a>
                                </li>
                            <% } %>
                            
                            <% if (typeof hasNextPage !== 'undefined' && hasNextPage) { %>
                                <li class="page-item">
                                    <a class="page-link" href="?page=<%= currentPage + 1 %>&filter=<%= filter %>&startDate=<%= startDate %>&endDate=<%= endDate %>" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            <% } %>
                        </ul>
                    </nav>
                </div>
                

                <script>
                    function applyFilter(filter) {
                        const url = new URL(window.location.href);
                        url.searchParams.set('filter', filter);
                        if (filter !== 'custom') {
                            url.searchParams.delete('startDate');
                            url.searchParams.delete('endDate');
                        }
                        window.location.href = url.toString();
                    }
                
                    function applyCustomFilter() {
                        const filter = 'custom';
                        const startDate = document.getElementById('start-date').value;
                        const endDate = document.getElementById('end-date').value;
                        const url = new URL(window.location.href);
                        url.searchParams.set('filter', filter);
                        if (startDate) url.searchParams.set('startDate', startDate);
                        if (endDate) url.searchParams.set('endDate', endDate);
                        window.location.href = url.toString();
                    }
                
                    document.addEventListener('DOMContentLoaded', function () {
                        const salesData = <%- JSON.stringify(salesData || []) %>;
                        const chartData = <%- JSON.stringify(reversedChartData || []) %>;
                
                        // Process payment methods from sales data
                        const paymentMethods = {};
                        salesData.forEach(order => {
                            const method = order.payment_method || 'unknown';
                            paymentMethods[method] = (paymentMethods[method] || 0) + 1;
                        });
                
                        const paymentMethodsData = Object.entries(paymentMethods).map(([method, count]) => ({
                            _id: method,
                            count: count
                        }));
                
                        // Sales Chart
                        const ctx = document.getElementById('salesChart').getContext('2d');
                        let currentChartType = 'bar';
                        let chart;
                
                        function createChart(type) {
                            if (chart) {
                                chart.destroy();
                            }
                            chart = new Chart(ctx, {
                                type: type,
                                data: {
                                    labels: chartData.map(d => d.date),
                                    datasets: [
                                        {
                                            label: 'Revenue (₹) and Orders',
                                            data: chartData.map(d => ({ x: d.date, y: d.revenue, orders: d.orders })),
                                            borderColor: 'rgb(75, 192, 192)',
                                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                            fill: true,
                                            tension: 0.1
                                        }
                                    ]
                                },
                                options: {
                                    responsive: true,
                                    scales: {
                                        y: {
                                            beginAtZero: true,
                                            title: {
                                                display: true,
                                                text: 'Revenue (₹)'
                                            }
                                        },
                                        x: {
                                            title: {
                                                display: true,
                                                text: '<%= filter === "today" ? "Time" : (filter === "this_week" ? "Day" : (filter === "this_month" ? "Day" : (filter === "this_year" ? "Month" : "Year"))) %>'
                                            }
                                        }
                                    },
                                    plugins: {
                                        tooltip: {
                                            callbacks: {
                                                label: function(context) {
                                                    const { revenue, orders } = chartData[context.dataIndex];
                                                    return `Revenue: ₹${revenue} | Products: ${orders}`;
                                                }
                                            }
                                        }
                                    }
                                }
                            });
                        }
                
                        createChart(currentChartType);
                
                        document.getElementById('toggleChart').addEventListener('click', function() {
                            currentChartType = currentChartType === 'bar' ? 'line' : 'bar';
                            createChart(currentChartType);
                        });
                
                        // Payment Methods Chart
                        const paymentCtx = document.getElementById('paymentMethodsChart').getContext('2d');
                        new Chart(paymentCtx, {
                            type: 'doughnut',
                            data: {
                                labels: paymentMethodsData.map(d => d._id.toUpperCase()),
                                datasets: [{
                                    data: paymentMethodsData.map(d => d.count),
                                    backgroundColor: [
                                        'rgba(255, 99, 132, 0.8)',
                                        'rgba(54, 162, 235, 0.8)',
                                        'rgba(255, 206, 86, 0.8)'
                                    ],
                                    borderColor: [
                                        'rgba(255, 99, 132, 1)',
                                        'rgba(54, 162, 235, 1)',
                                        'rgba(255, 206, 86, 1)'
                                    ],
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                plugins: {
                                    legend: {
                                        position: 'top',
                                    },
                                    tooltip: {
                                        callbacks: {
                                            label: function(context) {
                                                const data = paymentMethodsData[context.dataIndex];
                                                const percentage = ((data.count / paymentMethodsData.reduce((a, b) => a + b.count, 0)) * 100).toFixed(1);
                                                return `${data._id.toUpperCase()}: ${data.count} orders (${percentage}%)`;
                                            }
                                        }
                                    }
                                }
                            }
                        });
                    });
                </script>
            </div>
        </div>
    </div>

    <%- include('partials/footer') %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
</body>
</html>