<!DOCTYPE html>
<html lang="en">
<%- include('partials/head') %>
<body>
    <div class="main-content">
        <div class="header">
            <div class="search-bar">
                <form action="/search" method="GET">
                    <input type="text" name="search" placeholder="Search">
                </form>
            </div>
            <div class="admin-profile mx-3">
                <a href="/admin/settings">
                    <i class="fa-solid fa-circle-user"></i>
                </a>
            </div>
        </div>
        <div class="breadcrumbs">breadcrumbs</div>

        <div class="dashboard-summary-container">
            <div class="row">
                <!-- Top Row: Dashboard Summary Boxes -->
                <div class="col-12 pe-3 dashboard-summary">
                    <div class="dashboard-summary1">
                        <h3>Total Users</h3>
                        <p><%= userCount %></p>
                        <p1>
                            <i class="fa-solid fa-chart-simple"></i> 8.5%
                            <p2>Up from last month</p2>
                        </p1>
                    </div>
                    <div class="dashboard-summary2">
                        <h3>Total Orders</h3>
                        <p><%= orderCount %></p>
                        <p1>
                            <i class="fa-solid fa-chart-simple"></i> 1.5%
                            <p2>Up from last month</p2>
                        </p1>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Gross Revenue</h3>
                        <p><%= totalAmount %></p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> 4.5% Down from last month
                        </p2>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Returns/Refunds</h3>
                        <p><%= totalAmount %></p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> 4.5% Down from last month
                        </p2>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Net Revenue</h3>
                        <p><%= totalAmount %></p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> 4.5% Down from last month
                        </p2>
                    </div>
                </div>
            </div>
        
            <div class="row">
                <!-- Main Content Row -->
                <div class="col-9 ">
                    <!-- Chart Section -->
                    <div class="chart-wrapper">
                        <div class="chart-container">
                            <div class="filter-container">
                                <select id="filter" class="filter-select">
                                    <option value="all_time">All Time</option>
                                    <option value="today">Today</option>
                                    <option value="this_week">This Week</option>
                                    <option value="this_month">This Month</option>
                                    <option value="this_year">This Year</option>
                                    <option value="custom">Custom</option>
                                </select>
                                <div id="custom-date-range" style="display: none;">
                                    <input type="date" id="start-date" class="date-input">
                                    <input type="date" id="end-date" class="date-input">
                                    <button id="apply-custom-filter" class="apply-btn">Apply</button>
                                </div>
                                <button id="toggleChart" class="toggle-btn"><i class="fas fa-chart-bar"></i></button>
                            </div>
                            <canvas id="salesChart"></canvas>
                        </div>
                    </div>
                </div>
        
                <!-- Vertical Box Section -->
                <div class="col-3">
                    <div class="vertical-box">
                        xcvxcvxcv
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Filter Section -->
        

        <!-- Table Section -->
        <div class="table-container" style="margin-top: 20px;">
            <h2>Sales Data</h2>
            <table class="all-table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Customer</th>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Amount</th>
                        <th>Status</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody id="salesDataTableBody">
                </tbody>
            </table>
            <div class="pagination mb-4">
                <div id="pageInfo" class="page-info"></div>
                <div id="paginationControls" class="pagination-controls"></div>
            </div>
        </div>

    </div>

    <%- include('partials/footer') %>

<style>
.pagination {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-top: 20px;
    font-size: var(--font-size-third);
    gap: 10px;
}

.page-info {
    color: var(--text-color-3);
    margin-bottom: 10px;
}

.pagination-controls {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 5px;
}

.pagination-controls button {
    padding: 1px 6px;
    margin: 0 5px;
    border: 1px solid var(--bg-color-btn-hover2);
    color: var(--text-color-3);
    cursor: pointer;
    background: transparent;
    transition: all 0.3s ease;
    font-size: inherit;
}

.pagination-controls button:hover {
    color: var(--text-color);
    border: 1px solid var(--text-color);
    background-color: var(--text-color-2);
}

.pagination-controls button.active {
    color: var(--text-color-4);
    border: 1px solid var(--text-color-4);
    background-color: var(--bg-color-btn-hover-4);
}

.pagination-controls button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}


</style>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const salesData = <%- JSON.stringify(salesData) %>;
    console.log("Frontend Sales Data:", salesData);

    if (!salesData || salesData.length === 0) {
        console.warn("No sales data available to render the chart.");
        return;
    }

    const ctx = document.getElementById('salesChart').getContext('2d');
    const chartContainer = document.querySelector('.chart-container');

    let currentChartType = 'bar';
    let chart = null;
    let filteredProducts = [];

    // Initialize filter elements
    const filterSelect = document.getElementById('filter');
    const customDateRange = document.getElementById('custom-date-range');
    const startDateInput = document.getElementById('start-date');
    const endDateInput = document.getElementById('end-date');
    const applyCustomFilterButton = document.getElementById('apply-custom-filter');

    // Pagination variables
    let currentPage = 1;
    const rowsPerPage = 10;

    function processDataForDisplay() {
        filteredProducts = [];
        salesData.forEach(order => {
            if (order.products && Array.isArray(order.products)) {
                order.products.forEach(product => {
                    filteredProducts.push({
                        orderId: order._id,
                        userName: order.user_name,
                        productName: product.product_name,
                        quantity: product.quantity,
                        amount: product.total_amount,
                        status: product.status,
                        date: new Date(order.createdAt)
                    });
                });
            }
        });
        return filteredProducts;
    }

    function filterByDateRange(data, startDate, endDate) {
        if (!startDate || !endDate) return data;
        return data.filter(item => {
            const itemDate = item.date;
            return itemDate >= startDate && itemDate <= endDate;
        });
    }

    function updateChart(data) {
        const groupedData = {};
        const filter = filterSelect.value;

        data.forEach(item => {
            let key;
            if (filter === 'today') {
                // Group by hour for today's data
                key = item.date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            } else if (filter === 'this_year' || filter === 'all_time') {
                // Group by month for yearly and all-time data
                key = item.date.toLocaleDateString([], { year: 'numeric', month: 'short' });
            } else {
                // Default grouping by date
                key = item.date.toLocaleDateString();
            }

            if (!groupedData[key]) {
                groupedData[key] = {
                    total: 0,
                    delivered: 0,
                    returned: 0
                };
            }
            groupedData[key].total += item.amount;
            if (item.status === 'delivered') groupedData[key].delivered += item.amount;
            if (item.status === 'returned') groupedData[key].returned += item.amount;
        });

        // Sort keys based on date
        const dates = Object.keys(groupedData);
        if (filter === 'today') {
            // Sort by time for today's data
            dates.sort((a, b) => {
                const timeA = new Date(`1970/01/01 ${a}`);
                const timeB = new Date(`1970/01/01 ${b}`);
                return timeA - timeB;
            });
        } else if (filter === 'this_year' || filter === 'all_time') {
            // Sort by month for yearly and all-time data
            dates.sort((a, b) => {
                const dateA = new Date(a);
                const dateB = new Date(b);
                return dateA - dateB;
            });
        } else {
            // Default sort by date
            dates.sort((a, b) => new Date(a) - new Date(b));
        }

        const datasets = [
            {
                label: 'Total Sales',
                data: dates.map(date => groupedData[date].total),
                backgroundColor: getComputedStyle(chartContainer).getPropertyValue('--bar-color'),
                borderColor: getComputedStyle(chartContainer).getPropertyValue('--bar-border-color'),
                borderWidth: 1
            },
            {
                label: 'Delivered',
                data: dates.map(date => groupedData[date].delivered),
                backgroundColor: getComputedStyle(chartContainer).getPropertyValue('--delivered-bar-color'),
                borderColor: getComputedStyle(chartContainer).getPropertyValue('--delivered-bar-border'),
                borderWidth: 1
            },
            {
                label: 'Returned',
                data: dates.map(date => groupedData[date].returned),
                backgroundColor: getComputedStyle(chartContainer).getPropertyValue('--returned-bar-color'),
                borderColor: getComputedStyle(chartContainer).getPropertyValue('--returned-bar-border'),
                borderWidth: 1
            }
        ];

        if (chart) {
            chart.destroy();
        }

        chart = new Chart(ctx, {
            type: currentChartType,
            data: {
                labels: dates,
                datasets: datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: value => '₹ ' + value.toLocaleString(),
                            color: 'rgba(255, 255, 255, 0.8)'  // Light white color for y-axis
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'  // Subtle grid lines
                        }
                    },
                    x: {
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.8)'  // Light white color for x-axis
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'  // Subtle grid lines
                        }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: 'rgba(255, 255, 255, 0.8)'  // Light white color for legend
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: context => {
                                return context.dataset.label + ': ₹ ' + 
                                    context.parsed.y.toLocaleString();
                            }
                        }
                    }
                }
            }
        });
    }

    function updateTable(data) {
        const tbody = document.getElementById('salesDataTableBody');
        tbody.innerHTML = '';

        const start = (currentPage - 1) * rowsPerPage;
        const end = Math.min(start + rowsPerPage, data.length);
        const pageData = data.slice(start, end);

        pageData.forEach((item, index) => {
            const row = document.createElement('tr');
            const dateTimeFormat = filterSelect.value === 'today' 
                ? item.date.toLocaleTimeString() // Show time for today's data
                : item.date.toLocaleString();    // Show date and time for other views

            row.innerHTML = `
                <td>${start + index + 1}</td>
                <td>${item.userName}</td>
                <td>${item.productName}</td>
                <td>${item.quantity}</td>
                <td>₹ ${item.amount.toLocaleString()}</td>
                <td><span class="status ${item.status}">${item.status}</span></td>
                <td>${dateTimeFormat}</td>
            `;
            tbody.appendChild(row);
        });
    }

    function updatePaginationControls(totalItems) {
        const totalPages = Math.ceil(totalItems / rowsPerPage);
        const controls = document.getElementById('paginationControls');
        controls.innerHTML = '';

        if (totalPages > 3) {
            addPageButton('First', 1);
        }

        for (let i = 1; i <= totalPages; i++) {
            if (totalPages <= 3 || 
                i === 1 || 
                i === totalPages || 
                (i >= currentPage - 1 && i <= currentPage + 1)) {
                addPageButton(i, i);
            }
        }

        if (totalPages > 3) {
            addPageButton('Last', totalPages);
        }

        document.getElementById('pageInfo').textContent = 
            `Page ${currentPage} of ${totalPages}`;
    }

    function addPageButton(text, page) {
        const button = document.createElement('button');
        button.textContent = text;
        if (page === currentPage) button.classList.add('active');
        button.addEventListener('click', () => {
            currentPage = page;
            refreshDisplay();
        });
        document.getElementById('paginationControls').appendChild(button);
    }

    function getDateRange(filter) {
        const today = new Date();
        let startDate, endDate;

        switch (filter) {
            case 'today':
                startDate = new Date(today.setHours(0, 0, 0, 0));
                endDate = new Date();
                break;
            case 'this_week':
                startDate = new Date(today.setDate(today.getDate() - today.getDay()));
                endDate = new Date(startDate);
                endDate.setDate(startDate.getDate() + 6);
                break;
            case 'this_month':
                startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                break;
            case 'this_year':
                startDate = new Date(today.getFullYear(), 0, 1);
                endDate = new Date(today.getFullYear(), 11, 31);
                break;
            case 'custom':
                if (!startDateInput.value || !endDateInput.value) return null;
                startDate = new Date(startDateInput.value);
                endDate = new Date(endDateInput.value);
                endDate.setHours(23, 59, 59, 999);
                break;
            default:
                return null;
        }
        return { startDate, endDate };
    }

    function refreshDisplay() {
        const dateRange = getDateRange(filterSelect.value);
        let displayData = processDataForDisplay();
        
        if (dateRange) {
            displayData = filterByDateRange(displayData, dateRange.startDate, dateRange.endDate);
        }

        updateTable(displayData);
        updateChart(displayData);
        updatePaginationControls(displayData.length);
    }

    // Event Listeners
    filterSelect.addEventListener('change', function() {
        if (this.value === 'custom') {
            customDateRange.style.display = 'flex';
        } else {
            customDateRange.style.display = 'none';
            currentPage = 1;
            refreshDisplay();
        }
    });

    applyCustomFilterButton.addEventListener('click', () => {
        currentPage = 1;
        refreshDisplay();
    });

    document.getElementById('toggleChart').addEventListener('click', () => {
        currentChartType = currentChartType === 'bar' ? 'line' : 'bar';
        refreshDisplay();
    });

    // Initialize display
    refreshDisplay();
});
</script>
</body>
</html>