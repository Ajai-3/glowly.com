<!DOCTYPE html>
<html lang="en">

<%- include('partials/head') %>
<div class="header">
  <div class="responsive-logo-admin-side">
    <div class="d-flex align-items-center">
      <i class="fa fa-bars" id="sidebar-toggle"></i>
    <h2 class="m-0 mx-2"> Glowly</h2>
    </div>
  </div>
  <div class="search-bar">
    <form action="/admin/search" method="GET">
      <input type="text" name="search" placeholder="Search" readonly>
      <button class="admin-search-button"><i class="fas fa-search"></i></button>
    </form>
  </div>
  <div class="admin-profile mx-3">
    <% if (admin && admin.profilePic) { %>
      <a href="/admin/settings" class="ms-2"><img src="<%= admin.profilePic %>" alt="Profile Picture" style="width: 35px; height: 35px; border-radius: 50%; object-fit: cover;"></a>
      <% } else {%>
        <a href="/admin/settings">
          <i class="fa-solid fa-circle-user"></i>
        </a>
      <% }  %>
  </div>
</div>
<div id="background-overlay" class="overlay"></div>
<!-- Main Content Section -->
<div class="main-content">


  <!-- Breadcrumbs Section -->
  <div class="breadcrumbs">
    <a href="/admin/products">Products</a> > <a href="/admin/edit-product/<%= product._id %>"> Edit product</a>
  </div>

  <!-- Edit Products Container -->
  <form id="edit-product" data-product-id="<%= product._id %>" data-variant-id="<%= variant._id %>" enctype="multipart/form-data">
    <div class="edit-products-container row">
      <div class="add-products-container1 col-6">
        <!-- Form To Edit Product -->
        <h4>Edit Product</h4>

        <!-- Product Name -->
        <div>
          <label for="productName">Product Name</label>
          <input type="text" name="productName" id="productName" value="<%= product.title %>" placeholder="Type product name">
        </div>

        <!-- Select Brand -->
        <div class="add-products-container-center">
          <div>
            <label for="brand">Select Brand</label>
            <select name="brand" id="brand">
              <% brands.forEach(brand => { %>
              <option value="<%= brand._id %>" <%= product.brandId && product.brandId._id.toString() === brand._id.toString() ? 'selected' : '' %>><%= brand.brandName %></option>
              <% }) %>
            </select>
          </div>
        </div>

        <!-- Description -->
        <label for="description">Description</label><br>
        <textarea id="description" name="description" placeholder="Enter product description here..."><%= product.description %></textarea>

        <!-- Category And Subcategory -->
        <div class="add-products-container-center">
          <div>
            <label for="category">Category</label><br>
            <select name="category" id="category" onchange="updateSubCategories()">
              <% categories.forEach(category => { %>
              <option value="<%= category._id %>" <%= product.categoryId && product.categoryId._id.toString() === category._id.toString() ? 'selected' : '' %>><%= category.name %></option>
              <% }) %>
            </select>
          </div>
          <div>
            <label for="subCategory">Sub Category</label><br>
            <select name="subCategory" id="subCategory">
            </select>
          </div>
        </div>
     
        <button type="submit" class="edit-product-btn2 my-3" style="width: 100%;">Update Product</button>
        <button onclick="window.location.href='/admin/add-variants/<%= product._id %>'" class="mb-3">Add new variant</button>

      </div>
     
      <div class="add-products-container1">
        <!-- Variants -->
        <div id="variants-section">
          <div class="variant" data-variant-index="0">
            <h5>Variant</h5>
            <div class="add-products-container-center d-flex align-items-end">
              <div>
                <label for="variantColor">Color</label>
                <input type="color" name="variantColor" id="variantColor" value="<%= variant.color %>">
              </div>
              <div>
                <label for="variantShade">Shade</label>
                <input type="text" name="variantShade" id="variantShade" value="<%= variant.shade %>" placeholder="Shade">
              </div>
              <div>
                <% if (variant.isDeleted) { %>
                <button type="button" class="restore-btn py-2 px-3" data-product-id="<%= product._id %>" data-variant-id="<%= variant._id %>">Restore Variant</button>
                <% } else { %>
                <button type="button" class="delete-btn py-1 px-3" data-product-id="<%= product._id %>" data-variant-id="<%= variant._id %>" data-is-new="false">Remove Variant</button>
                <% } %>
              </div>
            </div>
            <div class="d-flex justify-content-between">
              <div>
                <label for="variantRegularPrice">Regular Price</label>
                <input type="number" name="variantRegularPrice" id="variantRegularPrice" value="<%= variant.regularPrice %>" min="0" step="0.01" oninput="validatePrices(this)">
                <span class="error-message" id="regularPriceError0">Regular price must be non-negative.</span>
              </div>
              <div>
                <label for="variantSalePrice">Sale Price</label>
                <input type="number" name="variantSalePrice" id="variantSalePrice" value="<%= variant.salePrice %>" min="0" step="0.01" oninput="validatePrices(this)">
                <span class="error-message" id="salePriceErrorNegative0">Sale price must be non-negative.</span>
                <span class="error-message" id="salePriceErrorHigh0">Sale price must be <= regular price.</span>
              </div>
              <div>
                <label for="variantStockQuantity">Stock Quantity</label>
                <input type="number" name="variantStockQuantity" id="variantStockQuantity" value="<%= variant.stockQuantity %>" min="0" oninput="validateStockQuantity(this)">
                <span class="error-message" id="stockQuantityError0">Stock quantity must be non-negative.</span>
              </div>
            </div>
            <div>
              <label for="variantImages_0">Image 1</label>
              <input type="file" class="mb-1 variant-image-input" name="variantImages_0" id="variantImages_0" multiple>
              <label for="variantImages_1">Image 2</label>
              <input type="file" class="mb-1 variant-image-input" name="variantImages_1" id="variantImages_1" multiple>
              <label for="variantImages_2">Image 3</label>
              <input type="file" class="mb-1 variant-image-input" name="variantImages_2" id="variantImages_2" multiple>
              <label for="variantImages_3">Image 4</label>
              <input type="file" class="mb-1 variant-image-input" name="variantImages_3" id="variantImages_3" multiple>
              <div id="variantImagesContainer">
                <!-- Dynamically added variant image inputs will be appended here -->
              </div>
              <div class="my-2 image-preview-container d-flex flex-wrap justify-content-start">
                <% variant.images.forEach((image, imageIndex) => { %>
                <div class="image-preview">
                  <img src="<%= image %>" alt="Variant Image" style="width: 70px; height: 70px; margin-left: 3px;">
                  <button type="button" class="remove-image-btn" onclick="toggleImageRemoval(this, true)">X</button>
                </div>
                <% }) %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </form>
</div>
<!-- Cropper Modal -->
<div id="cropperModal" style="display:none;">
  <div class="modal-content">
    <div>
      <button id="cropButton">Crop</button>
      <button type="button" onclick="closeCropperModal()">Close</button>
    </div>
    <img id="imageToCrop" src="" alt="Image to crop">
  </div>
</div>

<!-- JavaScript Section -->
<%- include('partials/footer') %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
<script>
const toastSuccess = (message) => {
  iziToast.success({
    message: message,
    backgroundColor: '#0e932d',
    messageColor: '#FFFFFF',
    icon: 'fa fa-check',
    iconColor: '#FFFFFF',
    timeout: 1500,
    position: 'topRight',
  });
};

const toastError = (message) => {
  iziToast.error({
    message: message,
    backgroundColor: '#e51e1e',
    messageColor: '#FFFFFF',
    icon: 'fa fa-times',
    iconColor: '#FFFFFF',
    timeout: 1500,
    position: 'topRight',
  });
};

const toastWarning = (message) => {
  iziToast.warning({
    message: message,
    backgroundColor: '#e5811e',
    messageColor: '#212529',
    icon: 'fa fa-exclamation-triangle',
    iconColor: '#212529',
    timeout: 1500,
    position: 'topRight',
  });
};
function updateSubCategories() {
  const categoryId = document.getElementById('category').value;
  const subCategorySelect = document.getElementById('subCategory');
  subCategorySelect.innerHTML = ''; // Empty the options

  const categories = JSON.parse('<%- JSON.stringify(categories) %>');
  const productSubCategoryId = '<%= product.subcategoryId ? product.subcategoryId._id.toString() : '' %>';

  let firstSubCategoryId = null;

  categories.forEach(category => {
    if (category._id.toString() === categoryId) {
      category.subcategories.forEach(subcategory => {
        const option = document.createElement('option');
        option.value = subcategory._id;
        option.text = subcategory.name;

        if (!firstSubCategoryId) {
          firstSubCategoryId = subcategory._id;
        }

        if (subcategory._id.toString() === productSubCategoryId) {
          option.selected = true;
        }

        subCategorySelect.appendChild(option);
      });

      if (!productSubCategoryId && firstSubCategoryId) {
        subCategorySelect.value = firstSubCategoryId; 
      }
    }
  });
}

function validatePrices(input) {
  const variant = input.closest('.variant');
  const regularPriceInput = variant.querySelector('input[name="variantRegularPrice"]');
  const salePriceInput = variant.querySelector('input[name="variantSalePrice"]');
  const regularPriceError = variant.querySelector(`#regularPriceError${variant.dataset.variantIndex}`);
  const salePriceErrorNegative = variant.querySelector(`#salePriceErrorNegative${variant.dataset.variantIndex}`);
  const salePriceErrorHigh = variant.querySelector(`#salePriceErrorHigh${variant.dataset.variantIndex}`);

  const regularPrice = parseFloat(regularPriceInput.value);
  const salePrice = parseFloat(salePriceInput.value);

  regularPriceError.style.display = 'none';
  salePriceErrorNegative.style.display = 'none';
  salePriceErrorHigh.style.display = 'none';

  let valid = true;

  if (salePrice > regularPrice) {
    salePriceErrorHigh.style.display = 'block';
    valid = false;
  } else if (salePrice < 0) {
    salePriceErrorNegative.style.display = 'block';
    valid = false;
  }

  if (regularPrice < 0) {
    regularPriceError.style.display = 'block';
    valid = false;
  }

  return valid;
}

function validateStockQuantity(input) {
  const variant = input.closest('.variant');
  const stockQuantityError = variant.querySelector(`#stockQuantityError${variant.dataset.variantIndex}`);

  stockQuantityError.style.display = 'none';

  if (parseInt(input.value) < 0) {
    stockQuantityError.style.display = 'block';
    return false;
  }

  return true;
}

updateSubCategories();

let cropper;
let currentInput;

function handleImagePreviews(input, croppedImageSrc = null) {
  const previewContainer = input.closest('.variant').querySelector('.image-preview-container');

  if (croppedImageSrc) {
    const img = document.createElement('img');
    img.src = croppedImageSrc;
    img.alt = 'Variant Image';
    img.style.width = '70px';
    img.style.height = '70px';
    img.style.marginRight = '10px';

    const imageWrapper = document.createElement('div');
    imageWrapper.classList.add('image-preview');
    imageWrapper.appendChild(img);

    const removeButton = document.createElement('button');
    removeButton.type = 'button';
    removeButton.classList.add('remove-image-btn');
    removeButton.textContent = 'X';
    removeButton.onclick = function() {
      toggleImageRemoval(this, false); 
    };
    imageWrapper.appendChild(removeButton);

    previewContainer.appendChild(imageWrapper);
  } else {
    const files = Array.from(input.files);
    files.forEach(file => {
      const reader = new FileReader();
      reader.onload = function(e) {
        const img = document.createElement('img');
        img.src = e.target.result;
        img.alt = 'Variant Image';
        img.style.width = '70px';
        img.style.height = '70px';
        img.style.marginRight = '10px';
        img.style.marginBottom = '10px';

        const imageWrapper = document.createElement('div');
        imageWrapper.classList.add('image-preview');
        imageWrapper.appendChild(img);

        const removeButton = document.createElement('button');
        removeButton.type = 'button';
        removeButton.classList.add('remove-image-btn');
        removeButton.textContent = 'X';
        removeButton.onclick = function() {
          toggleImageRemoval(this, false);
        };
        imageWrapper.appendChild(removeButton);

        previewContainer.appendChild(imageWrapper);
      };
      reader.readAsDataURL(file);
    });
  }
}

function openCropperModal(imageSrc) {
  const cropperModal = document.getElementById('cropperModal');
  const imageToCrop = document.getElementById('imageToCrop');
  imageToCrop.src = imageSrc;
  cropperModal.style.display = 'block';
  cropper = new Cropper(imageToCrop, {
    aspectRatio: 1,
    viewMode: 1
  });
}

function closeCropperModal() {
  const cropperModal = document.getElementById('cropperModal');
  cropperModal.style.display = 'none';
  if (cropper) {
    cropper.destroy();
    cropper = null;
  }
}

function cropImage() {
  const croppedCanvas = cropper.getCroppedCanvas();
  const croppedImageDataURL = croppedCanvas.toDataURL('image/jpeg');

  fetch(croppedImageDataURL)
    .then(res => res.blob())
    .then(blob => {
      const file = new File([blob], 'cropped-image.jpg', { type: 'image/jpeg' });
      closeCropperModal();
      handleImagePreviews(currentInput, URL.createObjectURL(file));
      currentInput.croppedFile = file;
    })
    .catch(error => {
      console.error('Error cropping image:', error);
    });
}

function toggleImageRemoval(button, isExisting) {
  const imageWrapper = button.closest('.image-preview');
  if (isExisting) {
    if (imageWrapper.classList.contains('removed')) {
      imageWrapper.classList.remove('removed');
      button.textContent = 'X';
    } else {
      imageWrapper.classList.add('removed');
      button.textContent = 'Restore';
    }
  } else {
    imageWrapper.remove();
  }
}

document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('edit-product');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    let valid = true;

    const priceInputs = form.querySelectorAll('input[name="variantRegularPrice"], input[name="variantSalePrice"]');
    priceInputs.forEach(input => {
      if (!validatePrices(input)) {
        valid = false;
      }
    });

    const stockQuantityInputs = form.querySelectorAll('input[name="variantStockQuantity"]');
    stockQuantityInputs.forEach(input => {
      if (!validateStockQuantity(input)) {
        valid = false;
      }
    });

    if (!valid) {
      return;
    }

    const formData = new FormData(form);
    const productId = form.getAttribute('data-product-id');
    const variantId = form.getAttribute('data-variant-id');

    const existingImages = [];
    const removedImages = [];
    const imagePreviews = document.querySelectorAll('.image-preview');
    imagePreviews.forEach((preview, index) => {
      const imgSrc = preview.querySelector('img').src;
      const isRemoved = preview.classList.contains('removed');

      if (!isRemoved) {
        existingImages.push({ src: imgSrc, index: index });
      } else {
        removedImages.push({ src: imgSrc, index: index });
      }
    });

    existingImages.forEach(image => {
      formData.append('existingImages[]', JSON.stringify(image));
    });

    removedImages.forEach(image => {
      formData.append('removedImages[]', JSON.stringify(image));
    });

    const newImages = form.querySelectorAll('input[type="file"]');
    newImages.forEach(input => {
      if (input.croppedFile) {
        formData.append('variantImages', input.croppedFile);
      } else {
        Array.from(input.files).forEach(file => {
          formData.append('variantImages', file);
        });
      }
    });

    try {
      const response = await fetch(`/admin/edit-product/${productId}/${variantId}`, {
        method: 'PATCH',
        body: formData
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          toastSuccess(result.message);
          setTimeout(() => {
            window.location.href = "/admin/products"
          }, 1500)
        } else {
          toastError(result.message);
        }
      } else {
        toastError('Fields cannot be empty. Error updating product.');
      }
    } catch (error) {
      toastWarning('An error occurred while updating the product.');
    }
  });

  document.addEventListener('click', function(event) {
    if (event.target.classList.contains('delete-btn')) {
      const isNew = event.target.getAttribute('data-is-new') === 'true';
      if (isNew) {
        const variantElement = event.target.closest('.variant');
        variantElement.remove();
      }
    }
  });

  document.addEventListener('change', function(event) {
    if (event.target.classList.contains('variant-image-input')) {
      currentInput = event.target;
      const files = Array.from(event.target.files);
      files.forEach(file => {
        if (!file.type.startsWith('image/')) {
          toastError('Please select a valid image file.');
          return;
        }
        if (file.size > 5 * 1024 * 1024) {
          toastError('File size exceeds 5MB.');
          return;
        }
        const reader = new FileReader();
        reader.onload = function(e) {
          openCropperModal(e.target.result);
        };
        reader.onerror = function() {
          toastError('Error reading file. Please try again.');
        };
        reader.readAsDataURL(file);
      });
    }
  });

  document.getElementById('cropButton').addEventListener('click', cropImage);
});


document.addEventListener('DOMContentLoaded', function() {
  const buttons = document.querySelectorAll('.delete-btn, .restore-btn');

  buttons.forEach(button => {
    button.addEventListener('click', async () => {
      const productId = button.getAttribute('data-product-id');
      const variantId = button.getAttribute('data-variant-id');
      const isDeleted = button.classList.contains('restore-btn');
      const action = isDeleted ? 'restore' : 'delete';

      try {
        const response = await fetch(`/admin/toggle-variant`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            productId,
            variantId,
            action
          })
        });

        if (response.ok) {
          const result = await response.json();
          if (result.success) {
            if (action === 'delete') {
              button.textContent = 'Restore Variant';
              button.classList.remove('delete-btn');
              button.classList.add('restore-btn');
            } else {
              button.textContent = 'Remove Variant';
              button.classList.remove('restore-btn');
              button.classList.add('delete-btn');
            }
            toastSuccess(result.message);
          } else {
            toastError('Failed to update variant status');
          }
        } else {
          toastError('Error toggling variant status');
        }
      } catch (error) {
        console.error('Error:', error);
        toastWarning('An error occurred');
      }
    });
  });
});

function validatePrices(input) {
  const variant = input.closest('.variant');
  const regularPriceInput = variant.querySelector('input[name="variantRegularPrice"]');
  const salePriceInput = variant.querySelector('input[name="variantSalePrice"]');
  let isValid = true;

  // Remove old error styles
  regularPriceInput.style.borderColor = '';
  salePriceInput.style.borderColor = '';

  // Validate regular price
  if (!regularPriceInput.value.trim()) {
    toastError('Regular price is required');
    regularPriceInput.style.borderColor = 'red';
    isValid = false;
  } else if (parseFloat(regularPriceInput.value) <= 0) {
    toastError('Regular price must be greater than 0');
    regularPriceInput.style.borderColor = 'red';
    isValid = false;
  }

  // Validate sale price
  if (!salePriceInput.value.trim()) {
    toastError('Sale price is required');
    salePriceInput.style.borderColor = 'red';
    isValid = false;
  } else if (parseFloat(salePriceInput.value) <= 0) {
    toastError('Sale price must be greater than 0');
    salePriceInput.style.borderColor = 'red';
    isValid = false;
  }

  // Compare prices
  if (parseFloat(salePriceInput.value) >= parseFloat(regularPriceInput.value)) {
    toastError('Sale price must be less than regular price');
    salePriceInput.style.borderColor = 'red';
    regularPriceInput.style.borderColor = 'red';
    isValid = false;
  }

  return isValid;
}

function validateStockQuantity(input) {
  input.style.borderColor = '';
  
  if (!input.value.trim()) {
    toastError('Stock quantity is required');
    input.style.borderColor = 'red';
    return false;
  }

  const stock = parseInt(input.value);
  if (isNaN(stock) || stock < 0 || !Number.isInteger(stock)) {
    toastError('Stock quantity must be a positive whole number');
    input.style.borderColor = 'red';
    return false;
  }

  return true;
}

// Add real-time validation
document.addEventListener('DOMContentLoaded', function() {
  // Price input validation
  const priceInputs = document.querySelectorAll('input[name="variantRegularPrice"], input[name="variantSalePrice"]');
  priceInputs.forEach(input => {
    input.addEventListener('input', function() {
      // Remove non-numeric characters except decimal point
      this.value = this.value.replace(/[^\d.]/g, '');
      // Ensure only one decimal point
      this.value = this.value.replace(/(\..*)\./g, '$1');
      // Remove leading zeros
      this.value = this.value.replace(/^0+(?=\d)/, '');
    });
  });

  // Stock input validation
  const stockInputs = document.querySelectorAll('input[name="variantStockQuantity"]');
  stockInputs.forEach(input => {
    input.addEventListener('input', function() {
      // Only allow positive integers
      this.value = this.value.replace(/[^\d]/g, '');
      // Remove leading zeros
      this.value = this.value.replace(/^0+(?=\d)/, '');
    });
  });

  // Form submission validation
  const form = document.getElementById('edit-product');
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    let isValid = true;

    // Validate all prices
    priceInputs.forEach(input => {
      if (!validatePrices(input)) {
        isValid = false;
      }
    });

    // Validate all stock quantities
    stockInputs.forEach(input => {
      if (!validateStockQuantity(input)) {
        isValid = false;
      }
    });

    if (!isValid) {
      return false;
    }

    // Continue with form submission if validation passes
    // ...rest of your existing form submission code...
  });
});

function validateForm() {
  let isValid = true;
  const requiredFields = {
    productName: 'Product name',
    brand: 'Brand',
    description: 'Description',
    category: 'Category',
    subCategory: 'Sub category',
    variantShade: 'Shade name',
    variantRegularPrice: 'Regular price',
    variantSalePrice: 'Sale price',
    variantStockQuantity: 'Stock quantity'
  };

  // Check all required fields
  for (const [fieldName, label] of Object.entries(requiredFields)) {
    const input = document.querySelector(`[name="${fieldName}"]`);
    if (input && !input.value.trim()) {
      toastError(`${label} is required`);
      input.style.borderColor = 'red';
      isValid = false;
    }
  }

  // Validate prices and stock
  const regularPrice = document.getElementById('variantRegularPrice');
  const salePrice = document.getElementById('variantSalePrice');
  const stockQuantity = document.getElementById('variantStockQuantity');

  // Price validation
  if (regularPrice && salePrice) {
    const regPrice = parseFloat(regularPrice.value);
    const saleP = parseFloat(salePrice.value);

    if (regPrice <= 0) {
      toastError('Regular price must be greater than 0');
      regularPrice.style.borderColor = 'red';
      isValid = false;
    }
    if (saleP <= 0) {
      toastError('Sale price must be greater than 0');
      salePrice.style.borderColor = 'red';
      isValid = false;
    }
    if (saleP >= regPrice) {
      toastError('Sale price must be less than regular price');
      salePrice.style.borderColor = 'red';
      regularPrice.style.borderColor = 'red';
      isValid = false;
    }
  }

  // Stock validation
  if (stockQuantity) {
    const stock = parseInt(stockQuantity.value);
    if (isNaN(stock) || stock < 0 || !Number.isInteger(stock)) {
      toastError('Stock quantity must be a positive whole number');
      stockQuantity.style.borderColor = 'red';
      isValid = false;
    }
  }

  return isValid;
}

// Update your form submission event listener
document.getElementById('edit-product').addEventListener('submit', async function(e) {
  e.preventDefault();

  // Clear any previous error styles
  document.querySelectorAll('input').forEach(input => {
    input.style.borderColor = '';
  });

  // Run validation before submitting
  if (!validateForm()) {
    return false;
  }

  const formData = new FormData(this);
  const productId = this.getAttribute('data-product-id');
  const variantId = this.getAttribute('data-variant-id');

  try {
    // ...rest of your existing form submission code...
  } catch (error) {
    console.error('Error:', error);
    toastWarning('An error occurred while updating the product');
  }
});

// Add real-time input cleaning
document.addEventListener('DOMContentLoaded', function() {
  // Price input cleaning
  const priceInputs = document.querySelectorAll('input[name="variantRegularPrice"], input[name="variantSalePrice"]');
  priceInputs.forEach(input => {
    input.addEventListener('input', function() {
      this.value = this.value.replace(/[^\d.]/g, '');
      this.value = this.value.replace(/(\..*)\./g, '$1');
      this.value = this.value.replace(/^0+(?=\d)/, '');
    });
  });

  // Stock quantity input cleaning
  const stockInput = document.querySelector('input[name="variantStockQuantity"]');
  if (stockInput) {
    stockInput.addEventListener('input', function() {
      this.value = this.value.replace(/[^\d]/g, '');
      this.value = this.value.replace(/^0+(?=\d)/, '');
    });
  }
});
</script>

<%- include('partials/footer') %>

</html>