<!DOCTYPE html>
<html lang="en">
<%- include('partials/head') %> 
    <div class="main-content">
        <div class="header">
            <div class="search-bar">
                <form action="/admin/search" method="GET">
                    <input type="text" name="search" placeholder="Search" readonly>
                    <button class="admin-search-button"><i class="fas fa-search"></i></button>
                </form>
            </div>
            <div class="admin-profile mx-3">
                <a href="/admin/settings">
                    <i class="fa-solid fa-circle-user"></i>
                </a>
            </div>
        </div>
        <div class="brudcrumbs"><a href="/admin/products">Products</a> > <a href="">Add Product</a></div>

        <div class="add-products-container">
            <div class="add-products-container1">
                <form id="productForm" enctype="multipart/form-data">
                    <h4>Add New Product</h4>

                    <div class="add-products-container-center">
                        <div>
                            <label for="productName">Product Name</label>
                            <input type="text" name="productName" id="productName" placeholder="Type product name">
                        </div>
                        <div>
                            <label for="brand">Select Brand</label> <br>
                            <select name="brand" id="brand">
                                <option value="">Select Brand</option>
                                <% brands.forEach(brand => { %>
                                    <option value="<%= brand._id %>"><%= brand.brandName %></option>
                                <% }) %>
                            </select>
                        </div>
                    </div>             
                    <label for="description">Description</label><br>
                    <textarea id="description" name="description" placeholder="Enter product description here..."></textarea>
    
                    <div class="add-products-container-center">
                        <div>
                            <label for="category">Category</label> <br>
                            <select name="category" id="category" onchange="updateSubCategories()">
                                <option value="">Select Category</option>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category._id %>"><%= category.name %></option>
                                <% }) %>
                            </select>
                        </div>
                        <div>
                            <label for="subCategory">Sub Category</label> <br>
                            <select name="subCategory" id="subCategory">
                                <option value="">Select Sub Category</option>
                            </select>
                        </div>
                    </div>
    
                    <div class="add-products-container-center">
                        <div>
                            <label for="availableQuantity">Stock Quantity</label>
                            <input type="number" name="availableQuantity" id="availableQuantity" placeholder="303" min="1" value="1">
                        </div>
                        <div>
                            <label for="regularPrice">Regular Price</label>
                            <input type="number" name="regularPrice" id="regularPrice" placeholder="&#8377;21,400" min="1" value="1">
                        </div>
                        <div>
                            <label for="salePrice">Sale Price</label>
                            <input type="number" name="salePrice" id="salePrice" placeholder="&#8377;18,949" min="1" value="1">
                        </div>    
                    </div>
                    <div class="d-flex justify-content-between">
                        <a href="/admin/add-products"><button type="submit" class="add-product-btn2 my-1">Add Product</button></a> 
                    </div>
                </div>
                <div class="add-products-container2">
                    <h4>Add Product Images</h4>
                
                    <!-- First image upload -->
                    <div class="image-upload-slot">
                        <label for="productImage1" class="custom-image-input">
                            <img id="productImagePreview1" src="#" alt="Upload Product Image 1" />
                        </label>
                        <input
                            type="file"
                            id="productImage1"
                            name="productImages"
                            accept="image/*"
                            onchange="openCropper(event, 1)"
                            style="display: none;"/>
                    </div>
                
                    <!-- Second image upload -->
                    <div class="image-upload-slot">
                        <label for="productImage2" class="custom-image-input">
                            <img id="productImagePreview2" src="#" alt="Upload Product Image 2" />
                        </label>
                        <input
                            type="file"
                            id="productImage2"
                            name="productImages"
                            accept="image/*"
                            onchange="openCropper(event, 2)"
                            style="display: none;"/>
                    </div>
                
                    <!-- Third image upload -->
                    <div class="image-upload-slot">
                        <label for="productImage3" class="custom-image-input">
                            <img id="productImagePreview3" src="#" alt="Upload Product Image 3" />
                        </label>
                        <input
                            type="file"
                            id="productImage3"
                            name="productImages"
                            accept="image/*"
                            onchange="openCropper(event, 3)"
                            style="display: none;"/>
                    </div>
                
                    <!-- Fourth image upload -->
                    <div class="image-upload-slot">
                        <label for="productImage4" class="custom-image-input">
                            <img id="productImagePreview4" src="#" alt="Upload Product Image 4" />
                        </label>
                        <input
                            type="file"
                            id="productImage4"
                            name="productImages"
                            accept="image/*"
                            onchange="openCropper(event, 4)"
                            style="display: none;"/>
                    </div>
                </div> 
            </form> 
        </div> 
    </div>

    <!-- Modal for cropping -->
    <div id="cropperModal">
        <div class="modal-content">
            <img id="imageToCrop" src="" alt="Image to crop">
            <div>
                <button id="cropButton" onclick="cropImage()">Crop</button>
                <button onclick="closeCropperModal()">Close</button>
            </div>
            
        </div>
    </div>

<%- include('partials/footer') %> 
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
const toastSuccess = (message) => {
      iziToast.success({
        message: message,
        backgroundColor: '#0e932d',
        messageColor: '#FFFFFF',
        icon: 'fa fa-check',
        iconColor: '#FFFFFF',
        timeout: 1500,
        position: 'topRight',

      });
    };

    const toastError = (message) => {
      iziToast.error({
        message: message,
        backgroundColor: '#e51e1e',
        messageColor: '#FFFFFF',
        icon: 'fa fa-times',
        iconColor: '#FFFFFF',
        timeout: 1500,
        position: 'topRight',
      });
    };
    const toastInfo = (message) => {
      iziToast.info({
        message: message,
        backgroundColor: '#2160de',
        messageColor: '#FFFFFF',
        icon: 'fa fa-info-circle',
        iconColor: '#FFFFFF',
        timeout: 1500,
        position: 'topRight',
      });
    };

    const toastWarning = (message) => {
      iziToast.warning({
        message: message,
        backgroundColor: '#e5811e',
        messageColor: '#212529',
        icon: 'fa fa-exclamation-triangle',
        iconColor: '#212529',
        timeout: 1500,
        position: 'topRight',
      });
    };

const categories = [
        <% categories.forEach(category => { %>
            {
                _id: "<%= category._id %>",
                name: "<%= category.name %>",
                subcategories: [
                    <% category.subcategories.forEach(subcategory => { %>
                        { _id: "<%= subcategory._id %>", name: "<%= subcategory.name %>" },
                    <% }) %>
                ]
            },
        <% }) %>
    ];

    function updateSubCategories() {
        const categorySelect = document.getElementById('category');
        const subCategorySelect = document.getElementById('subCategory');
        const selectedCategoryId = categorySelect.value;

        console.log('Selected Category ID:', selectedCategoryId);
        subCategorySelect.innerHTML = '<option value="">Select Sub Category</option>';

        const selectedCategory = categories.find(category => category._id === selectedCategoryId);
        console.log('Selected Category:', selectedCategory);

        if (selectedCategory && selectedCategory.subcategories) {
            selectedCategory.subcategories.forEach(subcategory => {
                const option = document.createElement('option');
                option.value = subcategory._id;
                option.textContent = subcategory.name;
                subCategorySelect.appendChild(option);
            });
        }
    }



let croppedFiles = {};
let currentPreviewId = null;
let cropper = null;

function openCropper(event, previewId) {
    const file = event.target.files[0];
    const reader = new FileReader();

    reader.onload = function () {
        const imageUrl = reader.result;
        const imageElement = document.getElementById('imageToCrop');
        imageElement.src = imageUrl;

        // Show cropper modal
        const modal = document.getElementById('cropperModal');
        modal.style.display = 'flex';

        currentPreviewId = previewId;

        if (cropper) {
            cropper.destroy();
        }
        cropper = new Cropper(imageElement, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 0.5,
            scalable: false,
            zoomable: false,
            responsive: true,
        });
    };

    reader.readAsDataURL(file);
}

function cropImage() {
    const canvas = cropper.getCroppedCanvas();
    canvas.toBlob(function (blob) {
        const croppedFile = new File([blob], `cropped_image_${currentPreviewId}.jpg`, { type: 'image/jpeg' });

        croppedFiles[currentPreviewId] = croppedFile;

        const previewElement = document.getElementById(`productImagePreview${currentPreviewId}`);
        const reader = new FileReader();
        reader.onload = function () {
            previewElement.src = reader.result;
        };
        reader.readAsDataURL(croppedFile);

        closeCropperModal();
    }, 'image/jpeg');
}

function closeCropperModal() {
    const modal = document.getElementById('cropperModal');
    modal.style.display = 'none';
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
}

// Prevent form submission to manually handle image upload
document.getElementById('productForm').addEventListener('submit', (e) => {
    e.preventDefault(); 

    const formData = new FormData();

    const formElements = e.target.elements;
    for (let element of formElements) {
        if (element.name && element.type !== 'file') {
            formData.append(element.name, element.value);
        }
    }

    // Append cropped images to FormData
    for (let [key, file] of Object.entries(croppedFiles)) {
        formData.append('productImages', file);
    }

    fetch('/admin/add-products', {
        method: 'POST',
        body: formData,
    })
        .then((response) => response.json())
        .then((data) => {
            if (data.success) {
                toastSuccess(data.message);
                setTimeout( () => {
                    window.location.href = '/admin/products';
                }, 2000)
            } else {
                toastError(data.message);
            }
        })
        .catch((error) => {
            console.error('Error:', error);
            toastWarning("Error in addinging new");
        });
});


</script>







<!-- product table  -->
<!DOCTYPE html>
<html lang="en">
<%- include('partials/head') %> 
    <div class="main-content">
                
        <div class="header">
            <div class="search-bar">
                <form action="/admin/search-products" method="GET">
                    <input type="text" name="search" placeholder="Search Products">
                    <button  class="admin-search-button"><i class="fas fa-search"></i></button>
                </form>
            </div>
            <div class="admin-profile mx-3">
                <a href="/admin/settings">
                    <i class="fa-solid fa-circle-user"></i>
                </a>
            </div>
        </div>
        <div class="brudcrumbs"><a href="/admin/products">Products</a></div>
        
        <div>
            <div class="filter-container">
                <div class="filter-div1">
                    <div class="filter-box">
                        <i class="fa-solid fa-filter"></i>
                    </div>
                    <div class="filter-box">
                        <label for="filter">Filter By
                            <select name="filter" id="filter">
                                <option value="date">14 feb 2014</option>
                            </select>
                        </label>  
                    </div>
                    
                    
                       <form action="/admin/products" method="GET">
                        <div class="filter-box">
                            <label for="status">Status
                                <select name="status" id="status" onchange="this.form.submit()">
                                    <option value="all" <%= status === 'all' ? 'selected' : '' %>>All</option>
                                    <option value="deleted" <%= status === 'deleted' ? 'selected' : '' %>>Deleted</option>
                                    <option value="available" <%= status === 'available' ? 'selected' : '' %>>Available</option>
                                </select>
                            </label>
                        </div>
                    </form>
                </div>
    
               <a href="/admin/add-products">
                <button class="add-product-btn">
                    Add New Products
                </button>
               </a>
            </div>
            
        </div>
        <table class="all-table">
            <thead>
                <tr>
                    <th>S.No</th>
                    <th>Image</th>
                    <th>Product Name</th>
                    <th>Brand</th>
                    <th>Category</th>
                    <th>Sub category</th>
                    <th>Price</th>
                    <th>Sales Price</th>
                    <th>Offer</th>
                    <th>Pieces</th> 
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <% products.forEach((product, index) => { %>
                    <tr>
                        <td><%= (currentPage - 1) * 5 + index + 1 %></td>
                        <td>
                            <img src="/uploads/<%= encodeURIComponent(product.product_imgs[0]) %>" alt="<%= product.title %> Image" width="50" height="50">
                        </td>
                        <td class="truncate"><%= product.title %></td>

                        <td>
                            <%= product.brand && product.brand.brandName ? product.brand.brandName : "No brand" %>
                        </td> 
                        <td>
                            <%= product.category && product.category.name ? product.category.name : "No category" %>
                        </td>
                        <td>
                            <%= product.subcategory && product.subcategory.name ? product.subcategory.name : "No subcategory" %>
                        </td>                       
                        
                        <td><%= product.price %></td>
                        <td><%= product.sales_price %></td>

                        <td>
                            <% if (product.offer) { %>
                                <% if (product.offer.offerType === 'percentage') { %>
                                    <%= product.offer.offerValue %>%
                                <% } else { %>
                                    <%= product.offer.offerValue %>
                                <% } %>
                            <% } else { %>
                                No offer
                            <% } %>
                        </td>
                        
                        <td><%= product.available_quantity %></td>
                        <td>
                            <a href="/admin/edit-product/<%= product._id %>"><button class="edit-btn">Edit</button></a> |
                            <% if (!product.isDeleted) { %>
                                <button 
                                  class="delete-btn" 
                                  data-id="<%= product._id %>" 
                                  data-deleted="false"
                                >
                                  Delete
                                </button>
                              <% } else { %>
                                <button 
                                  class="restore-btn" 
                                  data-id="<%= product._id %>" 
                                  data-deleted="true"
                                >
                                  Restore
                                </button>
                              <% } %>
                        </td>
                    </tr>
                <% }) %>                
            </tbody>
        </table>
        
        <div class="pagination">
            <% if (currentPage > 1) { %>
                <a href="/admin/products?page=<%= currentPage - 1 %>&search=<%= search %>&status=<%= status %>">Previous</a>
            <% } %>
            
            <% for (let i = 1; i <= totalPages; i++) { %>
                <a href="/admin/products?page=<%= i %>&search=<%= search %>&status=<%= status %>" 
                   class="<%= currentPage === i ? 'active' : '' %>">
                    <%= i %>
                </a>
            <% } %>
            
            <% if (currentPage < totalPages) { %>
                <a href="/admin/products?page=<%= currentPage + 1 %>&search=<%= search %>&status=<%= status %>">Next</a>
            <% } %>
        </div>        
        
    </div> <!-- <div class="main-content"></div> -->

</body>
<%- include('partials/footer') %> 
<script>
    // const notyf = new Notyf({
    //         duration: 2000,
    //         ripple: true,
    //         position: { x: 'right', y: 'top' },
    //         types: [
    //             { type: 'success', background: 'green' },
    //             { type: 'error', background: 'red' },
    //         ],
    //         className: 'custom-notify',
    //     });

    //     function showNotyfNotification(message, type) {
    //         if (type === 'success') {
    //             notyf.success(message);
    //         } else if (type === 'error') {
    //             notyf.error(message);
    //         } else {
    //             notyf.open({ type: type, message: message });
    //         }
    //     }

        const toastSuccess = (message) => {
      iziToast.success({
        message: message,
        backgroundColor: '#0e932d',
        messageColor: '#FFFFFF',
        icon: 'fa fa-check',
        iconColor: '#FFFFFF',
        timeout: 1500,
        position: 'topRight',
      });
    };

    const toastError = (message) => {
      iziToast.error({
        message: message,
        backgroundColor: '#e51e1e',
        messageColor: '#FFFFFF',
        icon: 'fa fa-times',
        iconColor: '#FFFFFF',
        timeout: 1500,
        position: 'topRight',
      });
    };

    const toastInfo = (message) => {
      iziToast.info({
        message: message,
        backgroundColor: '#2160de',
        messageColor: '#FFFFFF',
        icon: 'fa fa-info-circle',
        iconColor: '#FFFFFF',
        timeout: 1500,
        position: 'topRight',
      });
    };

    const toastWarning = (message) => {
      iziToast.warning({
        message: message,
        backgroundColor: '#e5811e',
        messageColor: '#212529',
        icon: 'fa fa-exclamation-triangle',
        iconColor: '#212529',
        timeout: 1500,
        position: 'topRight',
      });
    };
        // document.addEventListener('DOMContentLoaded', function () {
        //     const urlParams = new URLSearchParams(window.location.search);
        //     const msg = urlParams.get('msg');
        //     const type = urlParams.get('type');

        //     if (msg && type) {
        //         showNotyfNotification(msg, type);

        //         if (window.history.replaceState) {
        //             const url = window.location.origin + window.location.pathname;
        //             window.history.replaceState(null, null, url);
        //         }
        //     }
        // });

        document.addEventListener('DOMContentLoaded', function () {
  const buttons = document.querySelectorAll('.delete-btn, .restore-btn');

  buttons.forEach(button => {
    button.addEventListener('click', async () => {
      const productId = button.getAttribute('data-id');
      const isDeleted = button.getAttribute('data-deleted') === 'true';

      try {
        const response = await fetch(`/admin/toggle-product/${productId}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
        });

        if (response.ok) {
          const result = await response.json();
          if (result.success) {
            button.textContent = result.isDeleted ? 'Restore' : 'Delete';
            button.className = result.isDeleted ? 'restore-btn' : 'delete-btn';
            button.setAttribute('data-deleted', result.isDeleted.toString());

            toastSuccess(result.message);
          } else {
            toastError('Failed to update product status');
          }
        } else {
          toastError('Error toggling product status');
        }
      } catch (error) {
        console.error('Error:', error);
        toastWarning('An error occurred');
      }
    });
  });
});
</script>
</html>
