<!DOCTYPE html>
<html lang="en">
  <%- include('partials/headforhome', { name: name, categories: categories }) %>
  <body>
    <div class="user-contents">
      <div class="search-bar">
        <input type="text" id="search-input" placeholder="Search by title or shade name">
      </div>
      <div id="breadcrumbs"></div>
      <div class="container mt-4">
        <div class="row">
          <div class="col-md-2 product-filter-div p-0">
            <form id="filter-form">
              <!-- Popularity Filter -->
              <div class="filter-item">
                <hr>
                <div class="filter-header d-flex justify-content-between align-items-center" data-filter="popularity">
                  <span>Popularity</span>
                  <i class="fa-solid fa-chevron-down"></i>
                </div>
                <div class="filter-options" id="popularity-options" style="display: none;">
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="trending">
                      Trending
                      <input type="checkbox" name="popularity" value="trending" id="trending">
                    </label>
                  </div>
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="most-reviewed">
                      Most Reviewed
                      <input type="checkbox" name="popularity" value="most-reviewed" id="most-reviewed">
                    </label>
                  </div>
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="top-rated">
                      Top Rated
                      <input type="checkbox" name="popularity" value="top-rated" id="top-rated">
                    </label>
                  </div>
                </div>
              </div>
              <!-- Category Filter -->
              <div class="filter-item">
                <hr>
                <div class="filter-header d-flex justify-content-between align-items-center" data-filter="category">
                  <span>Category</span>
                  <i class="fa-solid fa-chevron-down"></i>
                </div>
                <div class="filter-options" id="category-options" style="display: none;">
                  <% categories.forEach(category => { %>
                    <div class="d-flex align-items-center justify-content-between px-2 py-1">
                      <label for="category-<%= category.id %>"><%= category.name %></label>
                      <input type="checkbox" class="ml-auto category-checkbox" id="category-<%= category.id %>" name="category" value="<%= category.id %>" data-name="<%= category.name %>" />
                    </div>
                    <!-- Subcategory Filter nested within Category -->
                    <div class="filter-options subcategory-options" id="subcategory-options-<%= category.id %>" style="display: none; margin-left: 20px;">
                      <% category.subcategories.forEach(subcategory => { %>
                        <div class="d-flex align-items-center justify-content-between px-2 py-1">
                          <label for="subcategory-<%= subcategory.id %>"><%= subcategory.name %></label>
                          <input type="checkbox" class="ml-auto subcategory-checkbox" id="subcategory-<%= subcategory.id %>" name="subcategory" value="<%= subcategory.id %>" data-name="<%= subcategory.name %>" />
                        </div>
                      <% }) %>
                    </div>
                  <% }) %>
                </div>
              </div>
              <!-- Brand Filter -->
              <div class="filter-item">
                <hr>
                <div class="filter-header d-flex justify-content-between align-items-center" data-filter="brand">
                  <span>Brand</span>
                  <i class="fa-solid fa-chevron-down"></i>
                </div>
                <div class="filter-options" id="brand-options" style="display: none;">
                  <% brands.forEach(brand => { %>
                    <div class="d-flex align-items-center justify-content-between px-2 py-1">
                      <label for="brand-<%= brand.id %>"><%= brand.brandName %></label>
                      <input type="checkbox" class="ml-auto brand-checkbox" id="brand-<%= brand.id %>" name="brand" value="<%= brand.id %>" data-name="<%= brand.brandName %>" />
                    </div>
                  <% }) %>
                </div>
              </div>
              <!-- Price Filter -->
              <div class="filter-item">
                <hr>
                <div class="filter-header d-flex justify-content-between align-items-center" data-filter="price">
                  <span>Price</span>
                  <i class="fa-solid fa-chevron-down"></i>
                </div>
                <div class="filter-options" id="price-options" style="display: none;">
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="low-to-high">
                      Low to High
                      <input type="checkbox" name="price" value="low-to-high" id="low-to-high">
                    </label>
                  </div>
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="high-to-low">
                      High to Low
                      <input type="checkbox" name="price" value="high-to-low" id="high-to-low">
                    </label>
                  </div>
                </div>
              </div>
              <!-- Rating Filter -->
              <div class="filter-item">
                <hr>
                <div class="filter-header d-flex justify-content-between align-items-center" data-filter="average-rating">
                  <span>Average Rating</span>
                  <i class="fa-solid fa-chevron-down"></i>
                </div>
                <div class="filter-options" id="average-rating-options" style="display: none;">
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="rating-5">
                      5 Stars
                      <input type="checkbox" name="rating" value="5" id="rating-5">
                    </label>
                  </div>
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="rating-4">
                      4 Stars
                      <input type="checkbox" name="rating" value="4" id="rating-4">
                    </label>
                  </div>
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="rating-3">
                      3 Stars
                      <input type="checkbox" name="rating" value="3" id="rating-3">
                    </label>
                  </div>
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="rating-2">
                      2 Stars
                      <input type="checkbox" name="rating" value="2" id="rating-2">
                    </label>
                  </div>
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="rating-1">
                      1 Star
                      <input type="checkbox" name="rating" value="1" id="rating-1">
                    </label>
                  </div>
                </div>
              </div>
              <!-- Alphabetical Sort Filter -->
              <div class="filter-item">
                <hr>
                <div class="filter-header d-flex justify-content-between align-items-center" data-filter="alphabetical">
                  <span>Sort Alphabetically</span>
                  <i class="fa-solid fa-chevron-down"></i>
                </div>
                <div class="filter-options" id="alphabetical-options" style="display: none;">
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="alphabetical-a-z">
                      A-Z
                      <input type="checkbox" name="alphabetical" value="a-z" id="alphabetical-a-z">
                    </label>
                  </div>
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="alphabetical-z-a">
                      Z-A
                      <input type="checkbox" name="alphabetical" value="z-a" id="alphabetical-z-a">
                    </label>
                  </div>
                </div>
              </div>
              <!-- New Arrivals Filter -->
              <div class="filter-item">
                <hr>
                <div class="filter-header d-flex justify-content-between align-items-center" data-filter="new-arrivals">
                  <span>New Arrivals</span>
                  <i class="fa-solid fa-chevron-down"></i>
                </div>
                <div class="filter-options" id="new-arrivals-options" style="display: none;">
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="new-arrivals-latest">
                      Latest
                      <input type="checkbox" name="new-arrivals" value="latest" id="new-arrivals-latest">
                    </label>
                  </div>
                  <div>
                    <label class="d-flex justify-content-between align-items-center px-2 py-1" for="new-arrivals-oldest">
                      Oldest
                      <input type="checkbox" name="new-arrivals" value="oldest" id="new-arrivals-oldest">
                    </label>
                  </div>
                </div>
                <hr>
              </div>
              <a href="/shop">
                <button type="button" id="clear-filters">Clear Filters</button>
              </a>
            </form>
          </div>
          <div class="col-md-10 p-0 ps-4">
            <div class="product-grid">
              <% for (let i = 0; i < variants.length; i++) { %>
                <div class="product-card" data-variant-id="<%= variants[i]._id %>">
                  <a href="/product/<%= products[i]._id %>/<%= variants[i]._id %>">
                    <img src="<%= variants[i].images[0] %>" alt="<%= variants[i].shade %>" />
                  </a>
                  <div class="product-card-like">
                    <form action="/add-to-wishlist/<%= products[i]._id %>" method="POST" class="wishlist-form" id="wishlist-form">
                      <% if (user) { %>
                        <% if (wishlist && wishlist.products && wishlist.products.some(item => item.product_id._id.toString() === products[i]._id.toString() && item.variant_id.toString() === variants[i]._id.toString())) { %>
                        <button type="submit" title="Remove from Wishlist" class="wishlist-button">
                          <i class="fa-solid fa-heart in-wishlist"></i>
                        </button>
                        <% } else { %>
                        <button type="submit" title="Add to Wishlist" class="wishlist-button">
                          <i class="fa-solid fa-heart not-in-wishlist"></i>
                        </button>
                        <% } %>
                      <% } else { %>
                      <button type="button" title="Login to Add to Wishlist" class="wishlist-button" onclick="window.location.href='/login'">
                        <i class="fa-solid fa-heart"></i>
                      </button>
                      <% } %>
                    </form>
                  </div>
                  <a href="/product/<%= products[i]._id %>/<%= variants[i]._id %>">
                    <p class="product-title"><%= products[i].title %> - <%= variants[i].shade %></p>
                  </a>
                  <div class="product-prices-box">
                    <p class="sale-price price-inr">₹<%= variants[i].salePrice %></p>
                    <p class="original-price price-inr mx-2">₹<%= variants[i].regularPrice %></p>
                    <% if (variants[i].regularPrice > variants[i].salePrice) { %>
                    <span class="discount-percentage">
                      <%= Math.round(((variants[i].regularPrice - variants[i].salePrice) / variants[i].regularPrice) * 100) %>% Off
                    </span>
                    <% } %>
                  </div>
                  <% const variantInCart = cartVariants.includes(variants[i]._id.toString()); %>
                  <% if (variantInCart) { %>
                  <a href="/user/my-cart">
                    <button type="button" class="go-to-cart-btn">Go To Bag</button>
                  </a>
                  <% } else { %>
                  <form action="/add-to-cart" method="POST" class="cart-form" data-product-id="<%= products[i]._id %>" data-variant-id="<%= variants[i]._id %>">
                    <button type="submit" class="add-to-cart-btn">Add to Bag</button>
                  </form>
                  <% } %>
                </div>
              <% } %>
            </div>
            <div id="no-products" style="display: none;">
              <p>No products available</p>
            </div>
            <div class="pagination-controls">
              <% if (currentPage > 1) { %>
                <a href="#" data-page="<%= currentPage - 1 %>">Previous</a>
              <% } %>
              <% for (let i = 1; i <= totalPages; i++) { %>
                <a href="#" data-page="<%= i %>" class="<%= i === currentPage ? 'active' : '' %>"><%= i %></a>
              <% } %>
              <% if (currentPage < totalPages) { %>
                <a href="#" data-page="<%= currentPage + 1 %>">Next</a>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </div>
    <%- include('partials/footerforhome') %>
<script>
  const toastWish = (message) => {
    iziToast.show({
      message: message,
      backgroundColor: '#e80071',
      messageColor: '#FFFFFF',
      icon: 'fas fa-check-circle',
      iconColor: '#FFFFFF',
      timeout: 3000,
      position: 'bottomCenter',
    });
  };

  const toastSuccess = (message) => {
    iziToast.success({
      message: message,
      backgroundColor: '#0e932d',
      messageColor: '#FFFFFF',
      icon: 'fa fa-check',
      iconColor: '#FFFFFF',
      timeout: 1500,
      position: 'topRight',
    });
  };

  const toastError = (message) => {
    iziToast.error({
      message: message,
      backgroundColor: '#e51e1e',
      messageColor: '#FFFFFF',
      icon: 'fa fa-times',
      iconColor: '#FFFFFF',
      timeout: 1500,
      position: 'topRight',
    });
  };

  const toastInfo = (message) => {
    iziToast.info({
      message: message,
      backgroundColor: '#2160de',
      messageColor: '#FFFFFF',
      icon: 'fa fa-info-circle',
      iconColor: '#FFFFFF',
      timeout: 1500,
      position: 'topRight',
    });
  };

  const toastWarning = (message) => {
    iziToast.warning({
      message: message,
      backgroundColor: '#e5811e',
      messageColor: '#212529',
      icon: 'fa fa-exclamation-triangle',
      iconColor: '#212529',
      timeout: 1500,
      size: 'small',
      position: 'topRight',
    });
  };

  document.addEventListener('DOMContentLoaded', () => {
    // Handle Wishlist form submission
    const forms = document.querySelectorAll('.wishlist-form');
    forms.forEach(form => {
      form.addEventListener('submit', function(event) {
        event.preventDefault();
        const button = form.querySelector('button');
        const icon = button.querySelector('i');
        const productId = form.action.split('/').pop();
        const variantId = form.closest('.product-card').getAttribute('data-variant-id').trim();
        const url = form.action;

        fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ product_id: productId, variant_id: variantId }),
        })
          .then(response => {
            if (!response.ok) {
              throw new Error(`Server Error: ${response.status} ${response.statusText}`);
            }
            return response.json();
          })
          .then(data => {
            if (data.action === 'added') {
              icon.classList.remove('not-in-wishlist');
              icon.classList.add('in-wishlist');
              button.title = 'Remove from Wishlist';
              toastWish('Product has been added to Wishlist.');
            } else if (data.action === 'removed') {
              icon.classList.remove('in-wishlist');
              icon.classList.add('not-in-wishlist');
              button.title = 'Add to Wishlist';
              toastWish('Product has been removed from Wishlist.');
            } else if (data.error) {
              console.error('Server Error:', data.error);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            toastWarning('An error occurred.');
          });
      });
    });

    // Handle Add to Cart form submission
    const cartForms = document.querySelectorAll('.cart-form');
    cartForms.forEach(form => {
      form.addEventListener('submit', function(event) {
        event.preventDefault();
        const productId = form.getAttribute('data-product-id');
        const variantId = form.getAttribute('data-variant-id');
        const quantity = 1;

        if ('<%= user %>') {
          fetch('/add-to-cart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ quantity, productId, variantId }),
          })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                const newButton = document.createElement('a');
                newButton.href = '/user/my-cart';
                newButton.innerHTML = `<button type="button" class="go-to-cart-btn">Go To Bag</button>`;
                form.parentNode.replaceChild(newButton, form);
                toastSuccess(data.message);
              } else {
                toastError(data.message);
              }
            })
            .catch(error => {
              console.error('Error:', error);
              toastWarning('Error adding product to cart.');
            });
        } else {
          window.location = '/login';
        }
      });
    });
  })

  document.addEventListener('DOMContentLoaded', function() {
  const filterForm = document.getElementById('filter-form');
  const searchInput = document.getElementById('search-input');
  const clearFiltersButton = document.getElementById('clear-filters');

  function applyFilters() {
    const formData = new FormData(filterForm);
    const filterParams = {};

    // Collect filter parameters from the form
    for (let [key, value] of formData.entries()) {
      if (!filterParams[key]) {
        filterParams[key] = [];
      }
      filterParams[key].push(value);
    }

    const searchQuery = searchInput ? searchInput.value.trim() : '';
    if (searchQuery) {
      filterParams.search = searchQuery;
    }

    // Create query string from filter parameters
    const queryString = new URLSearchParams(filterParams).toString();
    history.replaceState(null, '', `/shop?page=1&filters=${encodeURIComponent(JSON.stringify(filterParams))}`);
    fetchFilteredProducts(filterParams, 1);
  }

  filterForm.addEventListener('change', applyFilters);

  if (searchInput) {
    searchInput.addEventListener('keyup', applyFilters);
  }

  if (clearFiltersButton) {
    clearFiltersButton.addEventListener('click', function() {
      filterForm.reset();
      if (searchInput) searchInput.value = '';
      applyFilters();
    });
  }

  function fetchFilteredProducts(filterParams, page) {
    const params = {
      filters: JSON.stringify(filterParams),
      page: page
    };
    const queryString = new URLSearchParams(params).toString();

    fetch(`/shop?${queryString}`)
      .then(response => response.text())
      .then(html => {
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;

        const newProductGrid = tempDiv.querySelector('.product-grid');
        if (newProductGrid) {
          document.querySelector('.product-grid').innerHTML = newProductGrid.innerHTML;
        }

        const newPaginationControls = tempDiv.querySelector('.pagination-controls');
        if (newPaginationControls) {
          document.querySelector('.pagination-controls').innerHTML = newPaginationControls.innerHTML;
        }

        // Reattach event listeners after updating the product grid
        attachPaginationListeners();
      })
      .catch(error => console.error('Error fetching products:', error));
  }

  // Toggling visibility for filter options
  document.querySelectorAll('.filter-header').forEach(header => {
    header.addEventListener('click', () => {
      const options = header.nextElementSibling;
      options.style.display = options.style.display === 'none' ? 'block' : 'none';
      header.querySelector('i').classList.toggle('fa-chevron-down');
      header.querySelector('i').classList.toggle('fa-chevron-up');
    });
  });

  // Function to get URL parameters
  function getUrlParameter(name) {
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    const results = regex.exec(location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  }

  // Get the selected category and subcategory from the URL
  const selectedCategoryId = getUrlParameter('selectedCategory');
  const selectedSubcategoryId = getUrlParameter('selectedSubcategory');

  if (selectedCategoryId) {
    const categoryCheckbox = document.querySelector(`input[name="category"][value="${selectedCategoryId}"]`);
    if (categoryCheckbox) {
      categoryCheckbox.checked = true;

      // Show the subcategories for the selected category
      const subcategoryDiv = document.getElementById(`subcategory-options-${selectedCategoryId}`);
      if (subcategoryDiv) {
        subcategoryDiv.style.display = 'block';
      }
    }
  }

  if (selectedSubcategoryId) {
    const subcategoryCheckbox = document.querySelector(`input[name="subcategory"][value="${selectedSubcategoryId}"]`);
    if (subcategoryCheckbox) {
      subcategoryCheckbox.checked = true;
    }
  }

  // Function to toggle subcategory visibility based on selected categories
  function toggleSubcategories() {
    const selectedCategories = Array.from(document.querySelectorAll('input[name="category"]:checked')).map(checkbox => checkbox.value);

    // Hide all subcategories initially
    document.querySelectorAll('.subcategory-options').forEach(div => {
      div.style.display = 'none';
    });

    // Show subcategories for selected categories
    selectedCategories.forEach(categoryId => {
      const subcategoryDiv = document.getElementById(`subcategory-options-${categoryId}`);
      if (subcategoryDiv) {
        subcategoryDiv.style.display = 'block';
      }
    });
  }

  // Attach event listener to category checkboxes
  const categoryCheckboxes = document.querySelectorAll('input[name="category"]');
  categoryCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', toggleSubcategories);
  });

  // Initial call to set up subcategory visibility
  toggleSubcategories();

  // Attach pagination event listeners
  function attachPaginationListeners() {
    document.querySelectorAll('.pagination-controls a').forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const page = parseInt(this.getAttribute('data-page'));
        const filters = getUrlParameter('filters');
        let filterParams = {};
        try {
          filterParams = filters ? JSON.parse(decodeURIComponent(filters)) : {};
        } catch (error) {
          console.error('Error parsing filters:', error);
        }
        fetchFilteredProducts(filterParams, page);
      });
    });
  }

  // Initial call to attach pagination event listeners
  attachPaginationListeners();
});
</script>
  </body>
</html>




export const renderShopPage = async (req, res) => {
  try {
    const token = req.cookies.token;
    let cart = { products: [] };
    let user = null;
    let wishlist = { products: [] };
    let cartVariants = [];

    const page = parseInt(req.query.page) || 1;
    const limit = 8;
    const filters = req.query.filters ? JSON.parse(req.query.filters) : {};
    const searchQuery = req.query.search || '';

    if (token) {
      try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);
        user = decoded;
        cart = await Cart.findOne({ user_id: user.userId }) || { products: [] };
        wishlist = await Wishlist.findOne({ user_id: user.userId }).populate("products.product_id") || { products: [] };
      } catch (error) {
        console.log("Invalid or expired token:", error);
      }
    }

    if (cart.products.length > 0) {
      cartVariants = cart.products
        .filter(product => product.variant_id)
        .map(product => product.variant_id.toString());
    }
    const cartCount = cart.products.length;

    let filterConditions = { isDeleted: false };
    let sortOptions = {}; // Initialize sortOptions

    // Apply filters
    if (filters.popularity) {
      switch (filters.popularity[0]) {
        case 'trending':
          filterConditions.trending = true;
          break;
        case 'most-reviewed':
          filterConditions.mostReviewed = true;
          break;
        case 'top-rated':
          filterConditions.topRated = true;
          break;
      }
    }
    if (filters.category) {
      filterConditions.categoryId = { $in: filters.category };
    }
    if (filters.subcategory) {
      filterConditions.subcategoryId = { $in: filters.subcategory };
    }
    if (filters.brand) {
      filterConditions.brandId = { $in: filters.brand };
    }
    if (filters.price) {
      const priceRange = filters.price[0].split('-');
      filterConditions.price = { $gte: parseInt(priceRange[0]), $lte: parseInt(priceRange[1]) };
    }
    if (filters.rating) {
      filterConditions.rating = { $gte: parseInt(filters.rating[0]) };
    }
    if (filters.alphabetical) {
      sortOptions = filters.alphabetical[0] === 'a-z' ? { title: 1 } : { title: -1 };
    }
    if (filters["new-arrivals"]) {
      sortOptions.createdAt = filters["new-arrivals"][0] === 'latest' ? -1 : 1;
    }

    // Apply search query
    if (searchQuery) {
      filterConditions.$or = [
        { title: { $regex: searchQuery, $options: 'i' } },
        { 'variants.shade': { $regex: searchQuery, $options: 'i' } }
      ];
    }

    // Fetch all products and flatten the variants
    const allProducts = await Product.find(filterConditions).populate('variants').sort(sortOptions);
    const allVariants = [];
    allProducts.forEach(product => {
      product.variants.forEach(variant => {
        allVariants.push({
          product: product,
          variant: variant
        });
      });
    });

    // Calculate total number of variants and adjust pagination
    const totalVariants = allVariants.length;
    const totalPages = Math.ceil(totalVariants / limit);

    // Paginate variants
    const paginatedVariants = allVariants.slice((page - 1) * limit, page * limit);

    const categories = await Category.find({ isListed: true }).populate({
      path: "subcategories",
      match: { isListed: true },
    });

    const subcategories = await Subcategory.find({ isListed: true });
    const brands = await Brand.find({ isListed: true });

    return res.render("user/shop", {
      name: user ? user.name : "",
      user: user,
      products: paginatedVariants.map(item => item.product),
      variants: paginatedVariants.map(item => item.variant),
      categories,
      subcategories,
      brands,
      cartCount,
      cartVariants,
      wishlist,
      currentPage: page,
      totalPages,
      filters: JSON.stringify(filters),
      searchQuery
    });

  } catch (error) {
    console.error(error);
    res.status(500).send("Server error");
  }
};
<!DOCTYPE html>
<html lang="en">
<%- include('partials/head') %>
<body>
    <div class="main-content">
        <div class="header">
            <div class="search-bar">
                <form action="/search" method="GET">
                    <input type="text" name="search" placeholder="Search">
                </form>
            </div>
            <div class="admin-profile mx-3">
                <a href="/admin/settings">
                    <i class="fa-solid fa-circle-user"></i>
                </a>
            </div>
        </div>
        <div class="breadcrumbs">breadcrumbs</div>

        <div class="dashboard-summary-container">
            <div class="row">
                <!-- Top Row: Dashboard Summary Boxes -->
                <div class="col-12 pe-3 dashboard-summary">
                    <div class="dashboard-summary1">
                        <h3>Total Users</h3>
                        <p><%= userCount %></p>
                        <p1>
                            <i class="fa-solid fa-chart-simple"></i> 8.5%
                            <p2>Up from last month</p2>
                        </p1>
                    </div>
                    <div class="dashboard-summary2">
                        <h3>Total Orders</h3>
                        <p><%= orderCount %></p>
                        <p1>
                            <i class="fa-solid fa-chart-simple"></i> 1.5%
                            <p2>Up from last month</p2>
                        </p1>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Gross Revenue</h3>
                        <p><%= totalAmount %></p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> 4.5% Down from last month
                        </p2>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Returns/Refunds</h3>
                        <p><%= totalAmount %></p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> 4.5% Down from last month
                        </p2>
                    </div>
                    <div class="dashboard-summary3">
                        <h3>Net Revenue</h3>
                        <p><%= totalAmount %></p>
                        <p2>
                            <i class="fa-solid fa-chart-simple"></i> 4.5% Down from last month
                        </p2>
                    </div>
                </div>
            </div>
        
            <div class="row">
                <!-- Main Content Row -->
                <div class="col-9 pe-3">
                    <!-- Chart Section -->
                    <div class="chart-wrapper">
                        <div class="chart-container">
                            <div class="filter-container">
                                <label for="filter">Filter Sales Data:</label>
                                <select id="filter" name="filter">
                                    <option value="all_time" selected>All Time</option>
                                    <option value="today">Today</option>
                                    <option value="this_week">This Week</option>
                                    <option value="this_month">This Month</option>
                                    <option value="custom">Custom</option>
                                </select>
                                <div id="custom-date-range" style="display: none;">
                                    <label for="start-date">Start Date:</label>
                                    <input type="date" id="start-date" name="start-date">
                                    <label for="end-date">End Date:</label>
                                    <input type="date" id="end-date" name="end-date">
                                    <button id="apply-custom-filter">Apply</button>
                                </div>
                            </div>
                            <button id="toggleChart" class="toggle-button">
                                <i class="fas fa-chart-bar"></i>
                            </button>
                            <canvas id="salesChart"></canvas>
                        </div>
                    </div>
                </div>
        
                <!-- Vertical Box Section -->
                <div class="col-3">
                    <div class="vertical-box">
                        xcvxcvxcv
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Filter Section -->
        

        <!-- Table Section -->
        <div class="table-container" style="margin-top: 20px;">
            <h2>Sales Data</h2>
            <table class="all-table">
                <thead>
                    <tr>
                        <th>Sl No.</th>
                        <th>User Name</th>
                        <th>Product Name</th>
                        <th>Category Name</th>
                        <th>Quantity</th>
                        <th>Total Amount</th>
                        <th>Status</th>
                        <th>Order Placed At</th>
                    </tr>
                </thead>
                <tbody id="salesDataTableBody">
                </tbody>
            </table>
            <!-- Pagination Controls -->
            <div class="pagination mb-4">
                <div id="pageInfo" class="page-info"></div>
                <div id="paginationControls" class="pagination-controls"></div>
            </div>
        </div>

    </div>

    <%- include('partials/footer') %>

<style>
.pagination {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-top: 20px;
    font-size: var(--font-size-third);
    gap: 10px;
}

.page-info {
    color: var(--text-color-3);
    margin-bottom: 10px;
}

.pagination-controls {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 5px;
}

.pagination-controls button {
    padding: 1px 6px;
    margin: 0 5px;
    border: 1px solid var(--bg-color-btn-hover2);
    color: var(--text-color-3);
    cursor: pointer;
    background: transparent;
    transition: all 0.3s ease;
    font-size: inherit;
}

.pagination-controls button:hover {
    color: var(--text-color);
    border: 1px solid var(--text-color);
    background-color: var(--text-color-2);
}

.pagination-controls button.active {
    color: var(--text-color-4);
    border: 1px solid var(--text-color-4);
    background-color: var(--bg-color-btn-hover-4);
}

.pagination-controls button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}
</style>

<script>
   document.addEventListener('DOMContentLoaded', function () {
        const salesData = <%- JSON.stringify(salesData) %>;
        console.log("Sales Data:", salesData);

        if (salesData.length === 0) {
            console.warn("No sales data available to render the chart.");
            return;
        }

        const ctx = document.getElementById('salesChart').getContext('2d');
        const chartContainer = document.querySelector('.chart-container');

        let currentChartType = 'bar';
        let chart = createChart(salesData);

        document.getElementById('toggleChart').addEventListener('click', () => {
            currentChartType = currentChartType === 'bar' ? 'line' : 'bar';
            chart.destroy();
            chart = createChart(salesData, currentChartType);
        });

        const filterSelect = document.getElementById('filter');
        const customDateRange = document.getElementById('custom-date-range');
        const startDateInput = document.getElementById('start-date');
        const endDateInput = document.getElementById('end-date');
        const applyCustomFilterButton = document.getElementById('apply-custom-filter');

        // Pagination variables
        let currentPage = 1;
        const rowsPerPage = 10;

        let productList = [];

        // Initialize with the default filter
        filterSalesData('all_time');

        filterSelect.addEventListener('change', function () {
            if (this.value === 'custom') {
                customDateRange.style.display = 'block';
            } else {
                customDateRange.style.display = 'none';
                filterSalesData(this.value);
            }
        });

        applyCustomFilterButton.addEventListener('click', function () {
            filterSalesData('custom');
        });

        function updateSalesTable() {
            const tbody = document.querySelector('#salesDataTableBody');
            tbody.innerHTML = '';

            const start = (currentPage - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            const paginatedData = productList.slice(start, end);

            let serialNumber = start + 1;
            paginatedData.forEach(item => {
                const { order, product } = item;
                const row = `
                    <tr>
                        <td>${serialNumber++}</td>
                        <td>${order.user_id.name || 'User Not Found'}</td>
                        <td>${product.product_id.title || 'Product Not Found'}</td>
                        <td>${product.category_id ? product.category_id.name : 'Category Not Found'}</td>
                        <td>${product.quantity}</td>
                        <td>₹ ${product.total_amount.toLocaleString()}</td>
                        <td>${product.status}</td>
                        <td>${new Date(order.order_placed_at).toLocaleString()}</td>
                    </tr>
                `;
                tbody.insertAdjacentHTML('beforeend', row);
            });
        }

        function updatePaginationControls() {
            const paginationControls = document.getElementById('paginationControls');
            paginationControls.innerHTML = '';
            
            const totalPages = Math.ceil(productList.length / rowsPerPage);
            
            // Add First button
            if (totalPages > 3) {
                const firstButton = document.createElement('button');
                firstButton.textContent = 'First';
                firstButton.addEventListener('click', () => {
                    currentPage = 1;
                    updateSalesTable();
                    updatePaginationControls();
                });
                if (currentPage === 1) firstButton.disabled = true;
                paginationControls.appendChild(firstButton);
            }

            // Calculate the range of page numbers to show
            let startPage = currentPage - 1;
            let endPage = currentPage + 1;

            // Adjust if at the start
            if (startPage < 1) {
                startPage = 1;
                endPage = Math.min(3, totalPages);
            }

            // Adjust if at the end
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, totalPages - 2);
            }

            // Add page number buttons
            for (let i = startPage; i <= endPage; i++) {
                const pageButton = document.createElement('button');
                pageButton.textContent = i;
                if (i === currentPage) {
                    pageButton.classList.add('active');
                }
                pageButton.addEventListener('click', () => {
                    currentPage = i;
                    updateSalesTable();
                    updatePaginationControls();
                });
                paginationControls.appendChild(pageButton);
            }

            // Add Last button
            if (totalPages > 3) {
                const lastButton = document.createElement('button');
                lastButton.textContent = 'Last';
                lastButton.addEventListener('click', () => {
                    currentPage = totalPages;
                    updateSalesTable();
                    updatePaginationControls();
                });
                if (currentPage === totalPages) lastButton.disabled = true;
                paginationControls.appendChild(lastButton);
            }

            // Update page info
            document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${totalPages}`;
        }

        function getDateRange(filter) {
            const today = new Date();
            let startDate, endDate;

            switch (filter) {
                case 'today':
                    startDate = new Date(today.setHours(0, 0, 0, 0));
                    endDate = new Date();  // Current date and time
                    break;
                case 'this_week':
                    const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));
                    startDate = new Date(firstDayOfWeek.setHours(0, 0, 0, 0));
                    endDate = new Date(firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 6)).setHours(23, 59, 59, 999);
                    break;
                case 'this_month':
                    startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                    endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0, 23, 59, 59, 999);
                    break;
                case 'custom':
                    startDate = new Date(startDateInput.value);
                    endDate = new Date(endDateInput.value);
                    break;
                case 'all_time':
                default:
                    startDate = new Date(0); // Epoch time
                    endDate = new Date();    // Current date and time
                    break;
            }

            return { startDate, endDate };
        }

        function filterSalesData(filter) {
            const { startDate, endDate } = getDateRange(filter);
            const filteredSalesData = salesData.filter(order => {
                const orderDate = new Date(order.createdAt);
                return orderDate >= startDate && orderDate <= endDate;
            });

            productList = [];
            filteredSalesData.forEach(order => {
                order.products.forEach(product => {
                    productList.push({
                        order,
                        product
                    });
                });
            });

            console.log("Filtered Product List:", productList);

            chart.destroy();
            chart = createChart(filteredSalesData, currentChartType);
            currentPage = 1; // Reset to first page whenever filter changes
            updateSalesTable();
            updatePaginationControls();
        }

        function createChart(data, type = 'bar') {
            const labels = data.map(order => new Date(order.createdAt).toLocaleDateString());
            const totalSales = data.map(order => order.total_order_amount);

            const deliveredData = data.filter(order => 
                order.products.some(product => product.status === "delivered")
            ).map(order => order.products.reduce((sum, product) => 
                product.status === "delivered" ? sum + product.total_amount : sum, 0)
            );

            const returnedData = data.filter(order => 
                order.products.some(product => product.status === "returned")
            ).map(order => order.products.reduce((sum, product) => 
                product.status === "returned" ? sum + product.total_amount : sum, 0)
            );

            return new Chart(ctx, {
                type: type,
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Total Sales',
                            data: totalSales,
                            backgroundColor: getComputedStyle(chartContainer).getPropertyValue('--bar-color'),
                            borderColor: getComputedStyle(chartContainer).getPropertyValue('--bar-border-color'),
                            borderWidth: 1,
                            fill: true,
                        },
                        {
                            label: 'Delivered Products',
                            data: deliveredData,
                            backgroundColor: getComputedStyle(chartContainer).getPropertyValue('--delivered-bar-color'),
                            borderColor: getComputedStyle(chartContainer).getPropertyValue('--delivered-bar-border'),
                            borderWidth: 1,
                            fill: false,
                        },
                        {
                            label: 'Returned Products',
                            data: returnedData,
                            backgroundColor: getComputedStyle(chartContainer).getPropertyValue('--returned-bar-color'),
                            borderColor: getComputedStyle(chartContainer).getPropertyValue('--returned-bar-border'),
                            borderWidth: 1,
                            fill: false,
                        }
                    ]
                },
                options: {
                    plugins: {
                        legend: {
                            display: true,
                            labels: {
                                color: getComputedStyle(chartContainer).getPropertyValue('--label-color'),
                            }
                        },
                        tooltip: {
                            backgroundColor: getComputedStyle(chartContainer).getPropertyValue('--tooltip-bg'),
                            titleColor: getComputedStyle(chartContainer).getPropertyValue('--tooltip-title'),
                            bodyColor: getComputedStyle(chartContainer).getPropertyValue('--tooltip-body'),
                        }
                    },
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            grid: {
                                color: getComputedStyle(chartContainer).getPropertyValue('--grid-color'),
                            },
                            ticks: {
                                color: getComputedStyle(chartContainer).getPropertyValue('--label-color'),
                            }
                        },
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: getComputedStyle(chartContainer).getPropertyValue('--grid-color'),
                            },
                            ticks: {
                                color: getComputedStyle(chartContainer).getPropertyValue('--label-color'),
                            }
                        },
                    }
                },
            });
        }

        // Initialize pagination
        updatePaginationControls();
    });
</script>
</body>
</html>

import User from "../../models/user.model.js"
import Order from "../../models/order.model.js"
import Product from "../../models/product.model.js"
import Category from "../../models/category.model.js";



export const renderDashboardPage = async (req, res) => {
    try {

        const salesData = await Order.find().sort({ order_placed_at: -1 });

        const userCount = await User.countDocuments({ role: "user" });
        const orderCount = await Order.countDocuments();
        const totalAmount = await Order.aggregate([
            {
              $group: {
                _id: null,
                totalAmount: { $sum: "$total_order_amount" }
              }
            }
          ]);
          const total = totalAmount.length > 0 ? totalAmount[0].totalAmount : 0;
          const formattedTotal = `₹  ${total.toLocaleString()}`;

         
          
          return res.render("admin/dashboard", { 
              salesData,
              userCount,
              orderCount,
              totalAmount: formattedTotal,
          });
    } catch (error) {
        console.error("Error fetching sales data:", error);
        return res.status(500).send("Internal Server Error");
    }
};