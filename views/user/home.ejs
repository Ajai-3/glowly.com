<!DOCTYPE html>
<html lang="en">
<%- include('partials/headforhome', { user: user, categories: categories }) %>

<div class="user-contents">
  <div id="carouselExampleDark" class="carousel carousel-dark slide carousel-home" data-bs-ride="carousel">
    <div class="carousel-indicators">
      <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
      <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="1" aria-label="Slide 2"></button>
      <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="2" aria-label="Slide 3"></button>
    </div>
    <div class="carousel-inner">
      <div class="carousel-item active" data-bs-interval="10000">
        <img src="/assets/logo/home1.jpg" class="d-block w-100" alt="...">
        <div class="carousel-caption d-none d-md-block">
          <h5>First slide label</h5>
          <p>Some representative placeholder content for the first slide.</p>
        </div>
      </div>
      <div class="carousel-item" data-bs-interval="2000">
        <img src="/assets/logo/home2.jpg" class="d-block w-100" alt="...">
        <div class="carousel-caption d-none d-md-block">
          <h5>Second slide label</h5>
          <p>Some representative placeholder content for the second slide.</p>
        </div>
      </div>
      <div class="carousel-item">
        <img src="/assets/logo/home3.jpg" class="d-block w-100" alt="...">
        <div class="carousel-caption d-none d-md-block">
          <h5>Third slide label</h5>
          <p>Some representative placeholder content for the third slide.</p>
        </div>
      </div>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Next</span>
    </button>
  </div>
  <% categorizedProducts.forEach(categoryGroup => { %>
    <div class="category-group">
      <h2><%= categoryGroup.categoryName %></h2>
      <div class="product-group-wrapper" style="position: relative; overflow: hidden;">
        <div class="product-group d-flex" id="product-group-<%= categoryGroup.categoryName %>" style="transition: transform 0.5s ease;">
          <% categoryGroup.variants.forEach((variant) => { %>
            <div class="product-card col-12 col-sm-6 col-md-4 col-lg-2 mx-2" data-variant-id="<%= variant._id %>">
              <a href="/product/<%= variant.productId %>/<%= variant._id %>">
                <img src="<%= variant.images[0] %>" class="d-block w-100" alt="<%= variant.productTitle %> Image" />
              </a>
              <div class="product-card-like">
                <form action="/add-to-wishlist/<%= variant.productId %>" method="POST" class="wishlist-form" id="wishlist-form">
                  <% if (user) { %>
                    <% if (wishlist && wishlist.products && wishlist.products.some(item => item.product_id._id.toString() === variant.productId.toString() && item.variant_id.toString() === variant._id.toString())) { %>
                      <button type="submit" title="Remove from Wishlist" class="wishlist-button">
                        <i class="fa-solid fa-heart in-wishlist"></i>
                      </button>
                    <% } else { %>
                      <button type="submit" title="Add to Wishlist" class="wishlist-button">
                        <i class="fa-solid fa-heart not-in-wishlist"></i>
                      </button>
                    <% } %>
                  <% } else { %>
                    <button type="button" title="Login to Add to Wishlist" class="wishlist-button" onclick="window.location.href='/login'">
                      <i class="fa-solid fa-heart"></i>
                    </button>
                  <% } %>
                </form>
              </div>
              <a href="/product/<%= variant.productId %>/<%= variant._id %>">
                <p class="product-title"><%= variant.productTitle %> - <%= variant.shade %></p>
              </a>
              <div class="product-prices-box">
                <p class="sale-price price-inr">&#8377;<%= variant.salePrice %></p>
                <p class="original-price price-inr mx-2">&#8377;<%= variant.regularPrice %></p>
                <% if (variant.regularPrice > variant.salePrice) { %>
                  <span class="discount-percentage">
                    <%= Math.round(((variant.regularPrice - variant.salePrice) / variant.regularPrice) * 100) %>% Off
                  </span>
                <% } %>
              </div>
              <% const variantInCart = cartVariants.includes(variant._id.toString()); %>
              <% if (variantInCart) { %>
                <a href="/user/my-cart">
                  <button type="button" class="go-to-cart-btn">Go To Bag</button>
                </a>
              <% } else { %>
                <form action="/add-to-cart" method="POST" class="cart-form" data-product-id="<%= variant.productId %>" data-variant-id="<%= variant._id %>">
                  <button type="submit" class="add-to-cart-btn">Add to Bag</button>
                </form>
              <% } %>
            </div>
          <% }); %>
        </div>
        <button class="prev-button custom-carousel-control" data-category="<%= categoryGroup.categoryName %>">&lt;</button>
        <button class="next-button custom-carousel-control" data-category="<%= categoryGroup.categoryName %>">&gt;</button>
      </div>
    </div>
  <% }); %>
</div>





</body>
<%- include('partials/footerforhome') %>
<script>
  // Scroll to top on page load
  window.onload = function() {
    window.scrollTo(0, 0);
  };

  $(document).ready(function () {
            const offers = $('#offers-container .offer-item');
            let currentIndex = 0;
            const offerElement = $('#current-offer');

            if (offers.length > 0) {
                offerElement.text(offers.eq(currentIndex).text());
            }

            function showNextOffer() {
                if (offers.length === 0) return;

                const nextIndex = (currentIndex + 1) % offers.length;
                const nextOffer = offers.eq(nextIndex).text();

                offerElement.animate({ opacity: 0, marginTop: '-20px' }, 100, function () {
                    setTimeout(function () {
                        offerElement.text(nextOffer);
                        offerElement.css({ opacity: 0, marginTop: '20px' });
                        offerElement.animate({ opacity: 1, marginTop: '0px' }, 100);
                        currentIndex = nextIndex;
                    }, 3000);
                });
            }

            if (offers.length > 0) {
                setInterval(showNextOffer, 12000); 
            }
        });



  document.addEventListener("DOMContentLoaded", function() {
        const hamburgerMenu = document.getElementById("hamburger-menu");
        const navBarLists = document.querySelector(".nav-bar-lists-mobile");

        hamburgerMenu.addEventListener("click", function() {
            navBarLists.classList.toggle("active");
        });
    });
  document.addEventListener("DOMContentLoaded", function() {
    const categories = <%- JSON.stringify(categorizedProducts.map(category => category.categoryName)) %>;

    categories.forEach(category => {
      const categoryGroup = document.getElementById(`product-group-${category}`);
      let currentIndex = 0;
      const products = categoryGroup.querySelectorAll('.product-card');
      const totalProducts = products.length;
      const itemsToShow = 5;

      function showProducts() {
        const offset = currentIndex * (100 / itemsToShow);
        categoryGroup.style.transform = `translateX(-${offset}%)`;
      }

      function nextProduct() {
        currentIndex = (currentIndex + 1) % (totalProducts + itemsToShow);
        if (currentIndex + itemsToShow > totalProducts) {
          currentIndex = 0;
        }
        showProducts();
      }

      function prevProduct() {
        currentIndex = (currentIndex - 1 + totalProducts + itemsToShow) % (totalProducts + itemsToShow);
        if (currentIndex < 0) {
          currentIndex = totalProducts - itemsToShow;
        }
        showProducts();
      }

      showProducts();

      setInterval(nextProduct, 4000);

      document.querySelector(`button.prev-button[data-category="${category}"]`).addEventListener('click', prevProduct);
      document.querySelector(`button.next-button[data-category="${category}"]`).addEventListener('click', nextProduct);
    });
  });

  const toastSuccess = (message) => {
      iziToast.success({
        message: message,
        backgroundColor: '#0e932d',
        messageColor: '#FFFFFF',
        icon: 'fa fa-check',
        iconColor: '#FFFFFF',
        timeout: 1500,
        position: 'topRight',

      });
    };

    const toastError = (message) => {
      iziToast.error({
        message: message,
        backgroundColor: '#e51e1e',
        messageColor: '#FFFFFF',
        icon: 'fa fa-times',
        iconColor: '#FFFFFF',
        timeout: 1500,
        position: 'topRight',
      });
    };
    const toastInfo = (message) => {
      iziToast.info({
        message: message,
        backgroundColor: '#2160de',
        messageColor: '#FFFFFF',
        icon: 'fa fa-info-circle',
        iconColor: '#FFFFFF',
        timeout: 1500,
        position: 'topRight',
      });
    };

    const toastWarning = (message) => {
      iziToast.warning({
        message: message,
        backgroundColor: '#e5811e',
        messageColor: '#212529',
        icon: 'fa fa-exclamation-triangle',
        iconColor: '#212529',
        timeout: 1500,
        position: 'topRight',
      });
    };

    const toastWish = (message) => {
        iziToast.show({
            message: message,
            backgroundColor: '#e80071', 
            messageColor: '#FFFFFF',
            icon: 'fas fa-check-circle',
            iconColor: '#FFFFFF',
            timeout: 2000, 
            position: 'bottomCenter',
        });
    };
  const urlParams = new URLSearchParams(window.location.search);
  const message = urlParams.get('msg');

  if (message) {
      iziToast.success({
        message: message,
        backgroundColor: '#0e932d',
        messageColor: '#FFFFFF',
        icon: 'fa fa-check',
        iconColor: '#FFFFFF',
        timeout: 1500,
        position: 'topRight',
      });

    const newUrl = window.location.origin + window.location.pathname;
    window.history.replaceState(null, '', newUrl);
  }


document.addEventListener('DOMContentLoaded', () => {
    const forms = document.querySelectorAll('.wishlist-form');

    forms.forEach(form => {
        form.addEventListener('submit', function(event) {
            event.preventDefault();

            const button = form.querySelector('button');
            const icon = button.querySelector('i');
            const productId = form.action.split('/').pop();
            const variantId = form.closest('.product-card').getAttribute('data-variant-id').trim();
            const url = form.action;

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ product_id: productId, variant_id: variantId }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Server Error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.action === 'added') {
                    icon.classList.remove('not-in-wishlist');
                    icon.classList.add('in-wishlist');
                    button.title = 'Remove from Wishlist';

                    toastWish('Product has been added to Wishlist.');
                } else if (data.action === 'removed') {
                    icon.classList.remove('in-wishlist');
                    icon.classList.add('not-in-wishlist');
                    button.title = 'Add to Wishlist';

                    toastWish('Product has been removed from Wishlist.');
                } else if (data.error) {
                    console.error('Server Error:', data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastWarning('An error occurred.')
            });
        });
    });
});

// Handle add to cart form submission
document.addEventListener('DOMContentLoaded', () => {
    const cartForms = document.querySelectorAll('.cart-form');

    cartForms.forEach(form => {
      form.addEventListener('submit', function(event) {
        event.preventDefault();

        const productId = form.getAttribute('data-product-id');
        const variantId = form.getAttribute('data-variant-id');

        const quantity = 1;

        if ('<%= user %>') {
          fetch('/add-to-cart', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ quantity, productId, variantId }),
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                // const cartCountElement = document.querySelector('.nav-cart-count');
                // if (cartCountElement) {
                //   cartCountElement.innerText = data.cartCount;
                // }
                const cartCountElement = document.querySelector('.nav-cart-count');
                if (cartCountElement) {
                  cartCountElement.innerText = data.cartCount;
                  cartCountElement.style.display = data.cartCount > 0 ? "block" : "none";
                }
              const newButton = document.createElement('a');
              newButton.href = '/user/my-cart';
              newButton.innerHTML = `<button type="button" class="go-to-cart-btn">Go To Bag</button>`;

              form.parentNode.replaceChild(newButton, form);

                toastSuccess(data.message);
              } else {
                toastError(data.message);
              }
            })
            .catch(error => {
              console.error('Error:', error);
              toastWarning('Error adding product to cart.');
            });
        } else {
        window.location = '/login'

      }
    })
  })
})



</script>

</html>