<!DOCTYPE html>
<html lang="en">
<style>
  .table-dark {
    background-color: #1c1c1c;
    color: #ffffff;
  }

  .table-dark th,
  .table-dark td {
    border-color: #333333;
  }

  .table-dark .thead-dark th {
    background-color: #2a2a2a;
  }

  .pagination {
    margin-top: 20px;
  }

  .pagination .page-item.active .page-link {
    border-color: #ff00b3;
    color: #fff;
  }

  .pagination .page-item .page-link {
    color: #ff0090;
    background-color: #1c1c1c;
    border: 1px solid #333333;
  }

  .pagination .page-item .page-link:hover {
    background-color: #333333;
    color: #ffffff;
  }

  .table-container {
    background: #1b1b1b; 
    border-radius: 16px;
    padding: 20px;
    margin-top: 25px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .filter-section {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 15px;
  }

  .filter-buttons {
    display: flex;
    gap: 8px;
  }

  .filter-btn {
    padding: 6px 12px;
    border: none;
    border-radius: 20px;
    font-size: 13px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    background: #262626;
    color: #888;
  }

  .filter-btn:hover {
    background: #333;
    color: #fff;
  }

  .filter-btn.active {
    background: #ff00b3;
    color: #fff;
  }

  .table-responsive {
    overflow-x: auto;
  }

  .table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    background: #161616 !important;
    color: #e0e0e0;
    font-size: 14px;
  }

  .table th {
    background: #161616 !important;
    color: #fff !important;
    font-weight: 500;
    text-transform: uppercase;
    font-size: 12px;
    letter-spacing: 0.8px;
    padding: 16px;
    border-bottom: 2px solid #E80071;
  }

  .table td {
    padding: 16px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    vertical-align: middle;
    transition: all 0.2s ease;
    color: #fff !important;
    background-color: #161616 !important;
  }

  .table tbody tr {
    transition: all 0.2s ease;
    background: #0a0a0a !important; 
  }

  .table tbody tr:hover {
    background: #151515 !important; 
    transform: translateY(-1px);
  }

  .amount-credited {
    color: #0e932d;
    font-weight: 600;
  }

  .amount-debited {
    color: #dc3545;
    font-weight: 600;
  }

  .amount-refunded {
    color: #007bff;
    font-weight: 600;
  }

  .transaction-badge {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 11px;
    font-weight: 500;
  }

  .transaction-badge.credited {
    background: rgba(14, 147, 45, 0.1);
    color: #0e932d;
  }

  .transaction-badge.debited {
    background: rgba(220, 53, 69, 0.1);
    color: #dc3545;
  }

  .transaction-badge.refunded {
    background: rgba(0, 123, 255, 0.1);
    color: #007bff;
  }

  .pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 5px;
    margin-top: 15px;
  }

  .pagination-btn {
    padding: 6px 12px;
    border: none;
    background: #262626;
    color: #fff;
    border-radius: 6px;
    font-size: 13px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .pagination-btn:hover {
    background: #333;
  }

  .pagination-btn.active {
    background: #ff00b3;
  }

  .pagination-btn.disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  @media (max-width: 768px) {

    .table th,
    .table td {
      padding: 8px;
      font-size: 12px;
    }

    .transaction-badge {
      padding: 3px 6px;
      font-size: 10px;
    }
  }

  /* Transaction Type Styling */
  .transaction-type {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
  }

  .type-Credited {
    background: rgba(14, 147, 45, 0.1);
    color: #2ecc71;
  }

  .type-Debited {
    background: rgba(220, 53, 69, 0.1);
    color: #ff4757;
  }

  .type-Refund {
    background: rgba(0, 123, 255, 0.1);
    color: #3498db;
  }

  /* Amount Styling */
  .amount-Credited {
    color: #2ecc71;
    font-weight: 600;
  }

  .amount-Debited {
    color: #ff4757;
    font-weight: 600;
  }

  .amount-Refund {
    color: #3498db;
    font-weight: 600;
  }

  /* Date Styling */
  .transaction-date {
    color: #fff;
    font-weight: 500;
  }

  .transaction-time {
    color: #888;
    font-size: 12px;
    margin-top: 4px;
  }

  /* Description Styling */
  .transaction-description {
    color: #e0e0e0;
    font-weight: 500;
  }

  /* Update the transaction rows */
  .table tbody tr td:first-child {
    border-left: 3px solid transparent;
  }

  .table tbody tr[data-type="Credited"] td:first-child {
    border-left-color: #2ecc71;
  }

  .table tbody tr[data-type="Debited"] td:first-child {
    border-left-color: #ff4757;
  }

  .table tbody tr[data-type="Refund"] td:first-child {
    border-left-color: #3498db;
  }

  /* Additional override for any potential Bootstrap classes */
  .table-dark, 
  .table-dark td, 
  .table-dark th, 
  .table-dark thead th {
    background-color: #0a0a0a !important;
    border-color: rgba(255, 255, 255, 0.05) !important;
  }
</style>

<%- include('partials/headforhome', { user, categories }) %>

<div class="user-contents">
  <div class="container my-2 p-0">
    <div id="breadcrumbs" class="brudcrumbs-user-menu"><a href="/home">Home</a> > <a href="/my-account">My Account</a> > <a href="/my-orders">My Orders</a></div>
    <div class="row">
      <!-- Left Side Box -->
      <div class="col-md-3">
        <div class="card shadow-sm user-menu">
          <hr>
          <a href="/my-account"><i class="fas fa-user"></i> &nbsp; My Account</a>
          <hr>
          <a href="/manage-address"><i class="fa-solid fa-shop"></i> &nbsp; Manage Address</a>
          <hr>
          <a href="/my-coupons"><i class="fa-solid fa-gift"></i> &nbsp; My Coupons</a>
          <hr>
          <a href="/my-wishlist"><i class="fa-solid fa-heart"></i> &nbsp; My Wishlist</a>
          <hr>
          <a href="/my-wallet" class="active"><i class="fa-solid fa-wallet"></i> &nbsp; My Wallet</a>
          <hr>
          <a href="/my-orders"><i class="fa-solid fa-truck"></i> &nbsp; My Orders</a>
          <hr>
          <a href="/logout"><i class="fa-solid fa-power-off"></i> &nbsp; Logout</a>
          <hr>
        </div>
      </div>

      <!-- Right Side Box -->
      <div class="col-md-9 p-0">
        <div class="card shadow-sm p-4 user-menu-wallet">
          <h5 class="card-title m-0">My Wallet</h5>
          <div class="row g-0 mt-4 d-flex justify-content-between">
            <!-- Wallet Balance Section -->
            <div class="col-12 col-md-5 d-flex align-items-center justify-content-between px-3 py-1 wallet mb-3 mb-md-0">
              <div class="me-4">
                <img src="/assets/logo/wallet.png" alt="Wallet" class="empty-cart-image img-fluid" style="height: 100px; max-width: 100%;" />
              </div>
              <div class="ms-4 text-center text-md-start">
                <h4>Balance</h4>
                <h5 id="wallet-balance" class="price-inr wallet-balance">
                  ₹<%= wallet ? wallet.balance : 0 %>
                </h5>
              </div>
            </div>

            <!-- Add Money Section -->
            <div class="col-12 col-md-6 d-flex flex-column justify-content-between px-3 py-2 wallet">
              <p class="mb-2">Add money to Wallet</p>
              <input type="number" id="add-money-input" class="mb-2" placeholder="Enter amount" min="1" required />
              <div id="error" class="error-message"></div>
              <div class="d-flex wallet-select-money">
                <p>+ ₹ 500</p>
                <p>+ ₹ 1,000</p>
                <p>+ ₹ 1,500</p>
              </div>
              <div class="wallet-info my-2">
                <i class="fa-solid fa-circle-info"></i>
                You can add up to ₹25,000
              </div>
              <button id="wallet-add-money" class="common-main-btn px-3 ms-0">Add Money</button>
            </div>
            <% if (transactions && transactions.length > 0) { %>
            <div class="table-container mt-2">
              <!-- Simple Filter Section -->
              <div class="filter-section">
                <div class="filter-buttons">
                  <a href="/my-wallet?page=1&limit=<%= limit %>&type=all" class="filter-btn <%= type === 'all' ? 'active' : '' %>">All</a>
                  <a href="/my-wallet?page=1&limit=<%= limit %>&type=Credited" class="filter-btn <%= type === 'Credited' ? 'active' : '' %>">Credited</a>
                  <a href="/my-wallet?page=1&limit=<%= limit %>&type=Debited" class="filter-btn <%= type === 'Debited' ? 'active' : '' %>">Debited</a>
                  <a href="/my-wallet?page=1&limit=<%= limit %>&type=Refund" class="filter-btn <%= type === 'Refund' ? 'active' : '' %>">Refunded</a>
                </div>
              </div>


              <div class="table-responsive">
                <table class="table">
                  <thead>
                    <tr>
                      <th>Date & Time</th>
                      <th>Description</th>
                      <th>Type</th>
                      <th>Amount</th>
                    </tr>
                  </thead>
                  <tbody id="transactions-body">
                    <% transactions.forEach(transaction => { %>
                    <tr class="transaction-row" data-type="<%= transaction.type %>">
                      <td>
                        <div class="transaction-date">
                          <%= new Date(transaction.date).toLocaleDateString("en-GB") %>
                        </div>
                        <div class="transaction-time">
                          <%= new Date(transaction.date).toLocaleTimeString("en-US", { 
                            hour12: true, 
                            timeZone: "Asia/Kolkata" 
                          }) %>
                        </div>
                      </td>
                      <td class="transaction-description"><%= transaction.description %></td>
                      <td>
                        <span class="transaction-type type-<%= transaction.type %>">
                          <%= transaction.type %>
                        </span>
                      </td>
                      <td class="amount-<%= transaction.type %>">
                        <%= transaction.type === 'Credited' ? '+' : (transaction.type === 'Refund' ? '↺' : '-') %>
                        ₹<%= transaction.amount.toLocaleString('en-IN') %>.00
                      </td>
                    </tr>
                    <% }); %>
                  </tbody>
                </table>
              </div>

              <!-- Improved Pagination -->
              <div class="pagination-container">
                <% 
                  const maxVisible = 3;
                  const start = Math.max(1, Math.min(currentPage - 1, totalPages - maxVisible + 1));
                  const end = Math.min(start + maxVisible - 1, totalPages);
                %>
              
                <% if (currentPage > 1) { %>
                  <a href="/my-wallet?page=<%= currentPage - 1 %>&limit=<%= limit %>&type=<%= type %>" class="pagination-btn">
                    <i class="fas fa-chevron-left"></i>
                  </a>
                <% } %>
              
                <% for(let i = start; i <= end; i++) { %>
                  <a href="/my-wallet?page=<%= i %>&limit=<%= limit %>&type=<%= type %>" class="pagination-btn <%= i === currentPage ? 'active' : '' %>">
                    <%= i %>
                  </a>
                <% } %>
              
                <% if (currentPage < totalPages) { %>
                  <a href="/my-wallet?page=<%= currentPage + 1 %>&limit=<%= limit %>&type=<%= type %>" class="pagination-btn">
                    <i class="fas fa-chevron-right"></i>
                  </a>
                <% } %>
              </div>
              
              <% } else { %>
              <div class="empty-state mt-3">

                <p><i class="fas fa-wallet"></i>&nbsp;&nbsp;No transactions available</p>
              </div>

            </div>
            <% } %>

          </div>
        </div>

      </div>

    </div>
  </div>
</div>
</div>


<%- include('partials/footerforhome') %>

<script>
  const toastSuccess = (message) => {
    iziToast.success({
      message: message,
      backgroundColor: '#0e932d',
      messageColor: '#FFFFFF',
      icon: 'fa fa-check',
      iconColor: '#FFFFFF',
      timeout: 1500,
      position: 'topRight',

    });
  };

  const toastError = (message) => {
    iziToast.error({
      message: message,
      backgroundColor: '#e51e1e',
      messageColor: '#FFFFFF',
      icon: 'fa fa-times',
      iconColor: '#FFFFFF',
      timeout: 1500,
      position: 'topRight',
    });
  };
  const toastInfo = (message) => {
    iziToast.info({
      message: message,
      backgroundColor: '#2160de',
      messageColor: '#FFFFFF',
      icon: 'fa fa-info-circle',
      iconColor: '#FFFFFF',
      timeout: 1500,
      position: 'topRight',
    });
  };

  const toastWarning = (message) => {
    iziToast.warning({
      message: message,
      backgroundColor: '#e5811e',
      messageColor: '#212529',
      icon: 'fa fa-exclamation-triangle',
      iconColor: '#212529',
      timeout: 1500,
      size: 'small',
      position: 'topRight',
    });
  };




  const inputField = document.getElementById("add-money-input");
  const errorMessage = document.getElementById("error");
  const walletButtons = document.querySelectorAll(".wallet-select-money p");
  const maxAmount = 25000;

  function validateInput() {
    const currentValue = parseInt(inputField.value) || 0;
    if (currentValue < 0) {
      errorMessage.textContent = "Negative values are not allowed.";
      errorMessage.style.display = "block";
      inputField.style.borderColor = "red";
    } else if (currentValue > maxAmount) {
      errorMessage.textContent = `You can add up to ₹${maxAmount} only.`;
      errorMessage.style.display = "block";
      inputField.style.borderColor = "red";
    } else {
      errorMessage.textContent = "";
      errorMessage.style.display = "none";
      inputField.style.borderColor = "";
    }
  }

  inputField.addEventListener("input", validateInput);

  walletButtons.forEach((button) => {
    button.addEventListener("click", () => {
      const buttonValue = parseInt(button.textContent.replace(/[^\d]/g, ""));
      const currentValue = parseInt(inputField.value) || 0;
      const newValue = currentValue + buttonValue;
      if (newValue > maxAmount) {
        inputField.value = maxAmount;
        errorMessage.textContent = `You can add up to ₹${maxAmount} only.`;
        errorMessage.style.display = "block";
        inputField.style.borderColor = "red";
      } else {
        inputField.value = newValue;
        errorMessage.textContent = "";
        errorMessage.style.display = "none";
        inputField.style.borderColor = "";
      }
    });
  });


  function animateWalletBalance(start, end) {
    const walletBalanceElement = document.getElementById("wallet-balance");
    const duration = 1000;
    const steps = Math.min(Math.abs(end - start), 50);
    const increment = (end - start) / steps;
    const interval = duration / steps;

    let current = start;

    const animation = setInterval(() => {
      current += increment;

      if ((increment > 0 && current >= end) || (increment < 0 && current <= end)) {
        current = end;
        clearInterval(animation);
      }

      walletBalanceElement.textContent = `₹${formatNumber(Math.round(current))}`;
    }, interval);
  }

  function formatNumber(number) {
    const parts = number.toString().split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?=(\d{2})*(?!\d)))/g, ",");
    return parts.join(".");
  }

  function updateWalletBalance(balance) {
    const walletBalanceElement = document.getElementById("wallet-balance");
    const currentBalance = parseInt(walletBalanceElement.textContent.replace(/[^\d]/g, "")) || 0;
    animateWalletBalance(currentBalance, balance);
  }

  document.getElementById("wallet-add-money").onclick = async function(e) {
    e.preventDefault();

    const amount = parseInt(inputField.value);
    if (isNaN(amount) || amount <= 0 || amount > maxAmount) {
      errorMessage.textContent = `Enter a valid amount up to ₹${formatNumber(maxAmount)}.`;
      errorMessage.style.display = "block";
      inputField.style.borderColor = "red";
      return;
    }

    const response = await fetch("/add-money-to-wallet", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        amount
      }),
    });

    const data = await response.json();
    if (data.error) {
      toastError(data.error);
      return;
    }

    if (data.order) {
      const {
        order,
        key
      } = data;
      const options = {
        key,
        amount: order.amount,
        currency: "INR",
        name: "Glowly.com",
        description: "Add money to wallet",
        order_id: order.id,
        handler: async function(response) {
          const verifyResponse = await fetch("/add-money-to-wallet", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_order_id: response.razorpay_order_id,
              razorpay_signature: response.razorpay_signature,
              amount: amount,
            }),
          });

          const verifyData = await verifyResponse.json();
          if (verifyData.error) {
            toastError(verifyData.error);
          } else {
            toastSuccess("Wallet updated successfully");
            updateWalletBalance(verifyData.balance);
            inputField.value = "";
            errorMessage.style.display = "none";
            inputField.style.borderColor = "";
            setTimeout(() => {
              window.location.href = "/my-wallet";
            }, 1500);
          }
        },
        prefill: {
          name: "Test User",
          email: "test.user@example.com",
          contact: "9999999999",
        },
        notes: {
          address: "Test Address",
        },
        theme: {
          color: "#3399cc",
        },
      };

      const rzp1 = new Razorpay(options);
      rzp1.on("payment.failed", function(response) {
        toastError(`Payment Failed: ${response.error.description}`);
      });

      rzp1.open();
    }
  };

</script>

</html>